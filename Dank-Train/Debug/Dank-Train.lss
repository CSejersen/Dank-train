
Dank-Train.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000432  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  00000432  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021b6  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000143e  00000000  00000000  000027ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a73  00000000  00000000  00003bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  0000466c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a22  00000000  00000000  0000494c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096f  00000000  00000000  0000536e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00005cdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	95 c0       	rjmp	.+298    	; 0x138 <__vector_3>
   e:	00 00       	nop
  10:	c7 c0       	rjmp	.+398    	; 0x1a0 <__vector_4>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	aa d0       	rcall	.+340    	; 0x25a <main>
 106:	59 c1       	rjmp	.+690    	; 0x3ba <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <_ZN10Controller13initInteruptsEv>:
                // to do
            }

        // flere cases
    }
}
 10a:	e9 e6       	ldi	r30, 0x69	; 105
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 6f       	ori	r24, 0xF0	; 240
 112:	80 83       	st	Z, r24
 114:	8d b3       	in	r24, 0x1d	; 29
 116:	8c 60       	ori	r24, 0x0C	; 12
 118:	8d bb       	out	0x1d, r24	; 29
 11a:	78 94       	sei
 11c:	08 95       	ret

0000011e <_ZN10ControllerC1EP5MotorP5SoundP3Lys>:
 11e:	fc 01       	movw	r30, r24
 120:	73 83       	std	Z+3, r23	; 0x03
 122:	62 83       	std	Z+2, r22	; 0x02
 124:	55 83       	std	Z+5, r21	; 0x05
 126:	44 83       	std	Z+4, r20	; 0x04
 128:	37 83       	std	Z+7, r19	; 0x07
 12a:	26 83       	std	Z+6, r18	; 0x06
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	31 83       	std	Z+1, r19	; 0x01
 132:	20 83       	st	Z, r18
 134:	ea cf       	rjmp	.-44     	; 0x10a <_ZN10Controller13initInteruptsEv>
 136:	08 95       	ret

00000138 <__vector_3>:

    ISR(INT2_vect)
    {
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
        // disable interrupts
    EIMSK &= ~(1 << INT3);
 148:	8d b3       	in	r24, 0x1d	; 29
 14a:	87 7f       	andi	r24, 0xF7	; 247
 14c:	8d bb       	out	0x1d, r24	; 29
    EIMSK &= ~(1 << INT2);
 14e:	8d b3       	in	r24, 0x1d	; 29
 150:	8b 7f       	andi	r24, 0xFB	; 251
 152:	8d bb       	out	0x1d, r24	; 29

    counter++;
 154:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 158:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 162:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	2f e9       	ldi	r18, 0x9F	; 159
 168:	86 e8       	ldi	r24, 0x86	; 134
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <__vector_3+0x34>
 174:	00 c0       	rjmp	.+0      	; 0x176 <__vector_3+0x3e>
 176:	00 00       	nop
    _delay_ms(500);

    // reset interrupt flags and enable again
    EIFR |= (1 << INTF2);
 178:	8c b3       	in	r24, 0x1c	; 28
 17a:	84 60       	ori	r24, 0x04	; 4
 17c:	8c bb       	out	0x1c, r24	; 28
    EIFR |= (1 << INTF3);
 17e:	8c b3       	in	r24, 0x1c	; 28
 180:	88 60       	ori	r24, 0x08	; 8
 182:	8c bb       	out	0x1c, r24	; 28
    EIMSK |= (1 << INT2);
 184:	8d b3       	in	r24, 0x1d	; 29
 186:	84 60       	ori	r24, 0x04	; 4
 188:	8d bb       	out	0x1d, r24	; 29
    EIMSK |= (1 << INT3);
 18a:	8d b3       	in	r24, 0x1d	; 29
 18c:	88 60       	ori	r24, 0x08	; 8
 18e:	8d bb       	out	0x1d, r24	; 29
}
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_4>:

ISR(INT3_vect)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	2f 93       	push	r18
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
    // disable interrupts
    EIMSK &= ~(1 << INT2);
 1b0:	8d b3       	in	r24, 0x1d	; 29
 1b2:	8b 7f       	andi	r24, 0xFB	; 251
 1b4:	8d bb       	out	0x1d, r24	; 29
    EIMSK &= ~(1 << INT3);
 1b6:	8d b3       	in	r24, 0x1d	; 29
 1b8:	87 7f       	andi	r24, 0xF7	; 247
 1ba:	8d bb       	out	0x1d, r24	; 29

    counter++;
 1bc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1c0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1ca:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 1ce:	2f e7       	ldi	r18, 0x7F	; 127
 1d0:	88 e3       	ldi	r24, 0x38	; 56
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <__vector_4+0x34>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <__vector_4+0x3e>
 1de:	00 00       	nop
    _delay_ms(400);

    // reset interrupt flags and enable again
    EIFR |= (1 << INTF3);
 1e0:	8c b3       	in	r24, 0x1c	; 28
 1e2:	88 60       	ori	r24, 0x08	; 8
 1e4:	8c bb       	out	0x1c, r24	; 28
    EIFR |= (1 << INTF2);
 1e6:	8c b3       	in	r24, 0x1c	; 28
 1e8:	84 60       	ori	r24, 0x04	; 4
 1ea:	8c bb       	out	0x1c, r24	; 28
    EIMSK |= (1 << INT3);
 1ec:	8d b3       	in	r24, 0x1d	; 29
 1ee:	88 60       	ori	r24, 0x08	; 8
 1f0:	8d bb       	out	0x1d, r24	; 29
    EIMSK |= (1 << INT2);
 1f2:	8d b3       	in	r24, 0x1d	; 29
 1f4:	84 60       	ori	r24, 0x04	; 4
 1f6:	8d bb       	out	0x1d, r24	; 29
}
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <_ZN3Lys13setFrontItensEi>:
}

//portb ben 7
void Lys::setFrontItens(int intensitet){
	if (intensitet >= 0 || intensitet <= 100){
		frontLys = intensitet;
 208:	fc 01       	movw	r30, r24
 20a:	60 83       	st	Z, r22
 20c:	71 83       	std	Z+1, r23	; 0x01
	}
	else{
		frontLys = 1;
	}
	OCR0A = (255 / 100) * frontLys;
 20e:	66 0f       	add	r22, r22
 210:	67 bd       	out	0x27, r22	; 39
 212:	08 95       	ret

00000214 <_ZN3Lys11setBakItensEi>:

//portb ben 5
void Lys::setBakItens(int intensitet){
	
	if (intensitet >= 0 || intensitet <= 100){
		bakLys = intensitet;
 214:	fc 01       	movw	r30, r24
 216:	73 83       	std	Z+3, r23	; 0x03
 218:	62 83       	std	Z+2, r22	; 0x02
	}
	else{
		bakLys = 1;
	}
	
	OCR1A = (255 / 100) * bakLys;
 21a:	66 0f       	add	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 222:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 226:	08 95       	ret

00000228 <_ZN3LysC1Ev>:
#include "avr/io.h"
#include "Lys.h"


// default constructor
Lys::Lys()
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
{
	DDRB = 0xFF;
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	84 b9       	out	0x04, r24	; 4
	setFrontItens(0);
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	ce 01       	movw	r24, r28
 238:	e7 df       	rcall	.-50     	; 0x208 <_ZN3Lys13setFrontItensEi>
	setBakItens(0);
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	ce 01       	movw	r24, r28
 240:	e9 df       	rcall	.-46     	; 0x214 <_ZN3Lys11setBakItensEi>
	TCCR0A = 0b10000011;
 242:	83 e8       	ldi	r24, 0x83	; 131
 244:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011;
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	85 bd       	out	0x25, r24	; 37
	
	TCCR1A = 0b10000001;
 24a:	91 e8       	ldi	r25, 0x81	; 129
 24c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000011;
 250:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <main>:
#include "motorstyring.h"
#include "lys.h"
#include "sound.h"
#include "controller.h"

int main(){
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	67 97       	sbiw	r28, 0x17	; 23
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	f8 94       	cli
 268:	de bf       	out	0x3e, r29	; 62
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	cd bf       	out	0x3d, r28	; 61
     
    Motor motor;
 26e:	ce 01       	movw	r24, r28
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	1d d0       	rcall	.+58     	; 0x2ae <_ZN5MotorC1Ev>
    Sound sound;
 274:	ce 01       	movw	r24, r28
 276:	02 96       	adiw	r24, 0x02	; 2
 278:	28 d0       	rcall	.+80     	; 0x2ca <_ZN5SoundC1Ev>
    Lys lys;
 27a:	ce 01       	movw	r24, r28
 27c:	0c 96       	adiw	r24, 0x0c	; 12
 27e:	d4 df       	rcall	.-88     	; 0x228 <_ZN3LysC1Ev>
    Controller controller(&motor, &sound, &lys);
 280:	9e 01       	movw	r18, r28
 282:	24 5f       	subi	r18, 0xF4	; 244
 284:	3f 4f       	sbci	r19, 0xFF	; 255
 286:	ae 01       	movw	r20, r28
 288:	4e 5f       	subi	r20, 0xFE	; 254
 28a:	5f 4f       	sbci	r21, 0xFF	; 255
 28c:	be 01       	movw	r22, r28
 28e:	6f 5f       	subi	r22, 0xFF	; 255
 290:	7f 4f       	sbci	r23, 0xFF	; 255
 292:	ce 01       	movw	r24, r28
 294:	40 96       	adiw	r24, 0x10	; 16
 296:	43 df       	rcall	.-378    	; 0x11e <_ZN10ControllerC1EP5MotorP5SoundP3Lys>

    return 0;
}
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	67 96       	adiw	r28, 0x17	; 23
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	f8 94       	cli
 2a2:	de bf       	out	0x3e, r29	; 62
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	cd bf       	out	0x3d, r28	; 61
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <_ZN5MotorC1Ev>:
#include "motorstyring.h"
#include <avr/io.h> 

 // PB outputs and set to 0
Motor::Motor(){
	  DDRE = 0xFF;
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	8d b9       	out	0x0d, r24	; 13
	  PORTE = 0;
 2b2:	1e b8       	out	0x0e, r1	; 14
	  // Mode = 3 (PWM, Phase Correct, 10 bit)
	  // Set OC3A on match down counting / Clear OC3A on match up counting - PE 3
	  // Clock prescaler = 1
	  TCCR3A = 0b10000011;
 2b4:	83 e8       	ldi	r24, 0x83	; 131
 2b6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
	  TCCR3B = 0b00000011;
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
	  // Duty cycle = 0%
	  OCR3B = 0;
 2c0:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
 2c4:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
 2c8:	08 95       	ret

000002ca <_ZN5SoundC1Ev>:
	SendChar(PARA2);
	SendChar(CHECKSUM1);
	SendChar(CHECKSUM2);
	SendChar(END);
}
Sound::Sound() {
 2ca:	fc 01       	movw	r30, r24
	START = 0x7E;
 2cc:	8e e7       	ldi	r24, 0x7E	; 126
 2ce:	80 83       	st	Z, r24
	FEEDBACK = 0;
 2d0:	11 82       	std	Z+1, r1	; 0x01
	END = 0xEF;
 2d2:	8f ee       	ldi	r24, 0xEF	; 239
 2d4:	82 83       	std	Z+2, r24	; 0x02
	InitUART(BAUD, 8, 1);
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	48 e0       	ldi	r20, 0x08	; 8
 2da:	60 e8       	ldi	r22, 0x80	; 128
 2dc:	75 e2       	ldi	r23, 0x25	; 37
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <InitUART>
 2e4:	08 95       	ret

000002e6 <InitUART>:
    No Parity. /
    Baud rate = 9600. /
    Data bits = 8. /
*************************************************************************/
void InitUART(unsigned long BaudRate, unsigned char DataBit, unsigned char Rx_Int)
{
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	c4 2f       	mov	r28, r20
 2ee:	42 2f       	mov	r20, r18
	if((BaudRate < 300 || BaudRate > 115200 || DataBit < 5 || DataBit > 8)){
 2f0:	8b 01       	movw	r16, r22
 2f2:	9c 01       	movw	r18, r24
 2f4:	0c 52       	subi	r16, 0x2C	; 44
 2f6:	11 40       	sbci	r17, 0x01	; 1
 2f8:	21 09       	sbc	r18, r1
 2fa:	31 09       	sbc	r19, r1
 2fc:	05 3d       	cpi	r16, 0xD5	; 213
 2fe:	10 4c       	sbci	r17, 0xC0	; 192
 300:	21 40       	sbci	r18, 0x01	; 1
 302:	31 05       	cpc	r19, r1
 304:	20 f4       	brcc	.+8      	; 0x30e <InitUART+0x28>
 306:	c5 30       	cpi	r28, 0x05	; 5
 308:	10 f0       	brcs	.+4      	; 0x30e <InitUART+0x28>
 30a:	c9 30       	cpi	r28, 0x09	; 9
 30c:	18 f0       	brcs	.+6      	; 0x314 <InitUART+0x2e>
		exit(1);
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	53 d0       	rcall	.+166    	; 0x3ba <_exit>
	}
	UCSR0B = 0b00011000;
 314:	28 e1       	ldi	r18, 0x18	; 24
 316:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	if(Rx_Int != 0){
 31a:	44 23       	and	r20, r20
 31c:	29 f0       	breq	.+10     	; 0x328 <InitUART+0x42>
		UCSR0B |= 0b10000000;
 31e:	e1 ec       	ldi	r30, 0xC1	; 193
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	20 81       	ld	r18, Z
 324:	20 68       	ori	r18, 0x80	; 128
 326:	20 83       	st	Z, r18
	}

	
	//U2X0 = 0; // normal asynchronous mode.
	UBRR0 = (XTAL/(16*BaudRate))-1;
 328:	dc 01       	movw	r26, r24
 32a:	cb 01       	movw	r24, r22
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	aa 1f       	adc	r26, r26
 332:	bb 1f       	adc	r27, r27
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	aa 1f       	adc	r26, r26
 33a:	bb 1f       	adc	r27, r27
 33c:	9c 01       	movw	r18, r24
 33e:	ad 01       	movw	r20, r26
 340:	22 0f       	add	r18, r18
 342:	33 1f       	adc	r19, r19
 344:	44 1f       	adc	r20, r20
 346:	55 1f       	adc	r21, r21
 348:	22 0f       	add	r18, r18
 34a:	33 1f       	adc	r19, r19
 34c:	44 1f       	adc	r20, r20
 34e:	55 1f       	adc	r21, r21
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	74 e2       	ldi	r23, 0x24	; 36
 354:	84 ef       	ldi	r24, 0xF4	; 244
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e d0       	rcall	.+28     	; 0x376 <__udivmodsi4>
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	31 09       	sbc	r19, r1
 35e:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 362:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0C = ((DataBit-5) << 1);
 366:	c5 50       	subi	r28, 0x05	; 5
 368:	cc 0f       	add	r28, r28
 36a:	c0 93 c2 00 	sts	0x00C2, r28	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
}
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	08 95       	ret

00000376 <__udivmodsi4>:
 376:	a1 e2       	ldi	r26, 0x21	; 33
 378:	1a 2e       	mov	r1, r26
 37a:	aa 1b       	sub	r26, r26
 37c:	bb 1b       	sub	r27, r27
 37e:	fd 01       	movw	r30, r26
 380:	0d c0       	rjmp	.+26     	; 0x39c <__udivmodsi4_ep>

00000382 <__udivmodsi4_loop>:
 382:	aa 1f       	adc	r26, r26
 384:	bb 1f       	adc	r27, r27
 386:	ee 1f       	adc	r30, r30
 388:	ff 1f       	adc	r31, r31
 38a:	a2 17       	cp	r26, r18
 38c:	b3 07       	cpc	r27, r19
 38e:	e4 07       	cpc	r30, r20
 390:	f5 07       	cpc	r31, r21
 392:	20 f0       	brcs	.+8      	; 0x39c <__udivmodsi4_ep>
 394:	a2 1b       	sub	r26, r18
 396:	b3 0b       	sbc	r27, r19
 398:	e4 0b       	sbc	r30, r20
 39a:	f5 0b       	sbc	r31, r21

0000039c <__udivmodsi4_ep>:
 39c:	66 1f       	adc	r22, r22
 39e:	77 1f       	adc	r23, r23
 3a0:	88 1f       	adc	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	1a 94       	dec	r1
 3a6:	69 f7       	brne	.-38     	; 0x382 <__udivmodsi4_loop>
 3a8:	60 95       	com	r22
 3aa:	70 95       	com	r23
 3ac:	80 95       	com	r24
 3ae:	90 95       	com	r25
 3b0:	9b 01       	movw	r18, r22
 3b2:	ac 01       	movw	r20, r24
 3b4:	bd 01       	movw	r22, r26
 3b6:	cf 01       	movw	r24, r30
 3b8:	08 95       	ret

000003ba <_exit>:
 3ba:	f8 94       	cli

000003bc <__stop_program>:
 3bc:	ff cf       	rjmp	.-2      	; 0x3bc <__stop_program>
