
Dank-Train.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000076c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  0000076c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000079c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023e7  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001450  00000000  00000000  00002d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b3c  00000000  00000000  00004173  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00004cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a22  00000000  00000000  00004f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b7  00000000  00000000  000059b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006369  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	78 c0       	rjmp	.+240    	; 0xf2 <__ctors_end>
   2:	00 00       	nop
   4:	88 c0       	rjmp	.+272    	; 0x116 <__bad_interrupt>
   6:	00 00       	nop
   8:	86 c0       	rjmp	.+268    	; 0x116 <__bad_interrupt>
   a:	00 00       	nop
   c:	a1 c1       	rjmp	.+834    	; 0x350 <__vector_3>
   e:	00 00       	nop
  10:	d3 c1       	rjmp	.+934    	; 0x3b8 <__vector_4>
  12:	00 00       	nop
  14:	80 c0       	rjmp	.+256    	; 0x116 <__bad_interrupt>
  16:	00 00       	nop
  18:	7e c0       	rjmp	.+252    	; 0x116 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7c c0       	rjmp	.+248    	; 0x116 <__bad_interrupt>
  1e:	00 00       	nop
  20:	7a c0       	rjmp	.+244    	; 0x116 <__bad_interrupt>
  22:	00 00       	nop
  24:	78 c0       	rjmp	.+240    	; 0x116 <__bad_interrupt>
  26:	00 00       	nop
  28:	76 c0       	rjmp	.+236    	; 0x116 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	74 c0       	rjmp	.+232    	; 0x116 <__bad_interrupt>
  2e:	00 00       	nop
  30:	72 c0       	rjmp	.+228    	; 0x116 <__bad_interrupt>
  32:	00 00       	nop
  34:	70 c0       	rjmp	.+224    	; 0x116 <__bad_interrupt>
  36:	00 00       	nop
  38:	6e c0       	rjmp	.+220    	; 0x116 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6c c0       	rjmp	.+216    	; 0x116 <__bad_interrupt>
  3e:	00 00       	nop
  40:	6a c0       	rjmp	.+212    	; 0x116 <__bad_interrupt>
  42:	00 00       	nop
  44:	68 c0       	rjmp	.+208    	; 0x116 <__bad_interrupt>
  46:	00 00       	nop
  48:	66 c0       	rjmp	.+204    	; 0x116 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	64 c0       	rjmp	.+200    	; 0x116 <__bad_interrupt>
  4e:	00 00       	nop
  50:	62 c0       	rjmp	.+196    	; 0x116 <__bad_interrupt>
  52:	00 00       	nop
  54:	60 c0       	rjmp	.+192    	; 0x116 <__bad_interrupt>
  56:	00 00       	nop
  58:	5e c0       	rjmp	.+188    	; 0x116 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5c c0       	rjmp	.+184    	; 0x116 <__bad_interrupt>
  5e:	00 00       	nop
  60:	5a c0       	rjmp	.+180    	; 0x116 <__bad_interrupt>
  62:	00 00       	nop
  64:	58 c0       	rjmp	.+176    	; 0x116 <__bad_interrupt>
  66:	00 00       	nop
  68:	56 c0       	rjmp	.+172    	; 0x116 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	54 c0       	rjmp	.+168    	; 0x116 <__bad_interrupt>
  6e:	00 00       	nop
  70:	52 c0       	rjmp	.+164    	; 0x116 <__bad_interrupt>
  72:	00 00       	nop
  74:	50 c0       	rjmp	.+160    	; 0x116 <__bad_interrupt>
  76:	00 00       	nop
  78:	4e c0       	rjmp	.+156    	; 0x116 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4c c0       	rjmp	.+152    	; 0x116 <__bad_interrupt>
  7e:	00 00       	nop
  80:	4a c0       	rjmp	.+148    	; 0x116 <__bad_interrupt>
  82:	00 00       	nop
  84:	48 c0       	rjmp	.+144    	; 0x116 <__bad_interrupt>
  86:	00 00       	nop
  88:	46 c0       	rjmp	.+140    	; 0x116 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	44 c0       	rjmp	.+136    	; 0x116 <__bad_interrupt>
  8e:	00 00       	nop
  90:	42 c0       	rjmp	.+132    	; 0x116 <__bad_interrupt>
  92:	00 00       	nop
  94:	40 c0       	rjmp	.+128    	; 0x116 <__bad_interrupt>
  96:	00 00       	nop
  98:	3e c0       	rjmp	.+124    	; 0x116 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3c c0       	rjmp	.+120    	; 0x116 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3a c0       	rjmp	.+116    	; 0x116 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	38 c0       	rjmp	.+112    	; 0x116 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	36 c0       	rjmp	.+108    	; 0x116 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	34 c0       	rjmp	.+104    	; 0x116 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	32 c0       	rjmp	.+100    	; 0x116 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	30 c0       	rjmp	.+96     	; 0x116 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2e c0       	rjmp	.+92     	; 0x116 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2c c0       	rjmp	.+88     	; 0x116 <__bad_interrupt>
  be:	00 00       	nop
  c0:	2a c0       	rjmp	.+84     	; 0x116 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	28 c0       	rjmp	.+80     	; 0x116 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	26 c0       	rjmp	.+76     	; 0x116 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	24 c0       	rjmp	.+72     	; 0x116 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	22 c0       	rjmp	.+68     	; 0x116 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	20 c0       	rjmp	.+64     	; 0x116 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1e c0       	rjmp	.+60     	; 0x116 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1c c0       	rjmp	.+56     	; 0x116 <__bad_interrupt>
  de:	00 00       	nop
  e0:	1a c0       	rjmp	.+52     	; 0x116 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	00 01       	movw	r0, r0
  e6:	18 01       	movw	r2, r16
  e8:	30 01       	movw	r6, r0
  ea:	48 01       	movw	r8, r16
  ec:	60 01       	movw	r12, r0
  ee:	78 01       	movw	r14, r16
  f0:	8f 01       	movw	r16, r30

000000f2 <__ctors_end>:
  f2:	11 24       	eor	r1, r1
  f4:	1f be       	out	0x3f, r1	; 63
  f6:	cf ef       	ldi	r28, 0xFF	; 255
  f8:	d1 e2       	ldi	r29, 0x21	; 33
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	cd bf       	out	0x3d, r28	; 61
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0c bf       	out	0x3c, r16	; 60

00000102 <__do_clear_bss>:
 102:	22 e0       	ldi	r18, 0x02	; 2
 104:	a0 e0       	ldi	r26, 0x00	; 0
 106:	b2 e0       	ldi	r27, 0x02	; 2
 108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
 10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
 10c:	a2 30       	cpi	r26, 0x02	; 2
 10e:	b2 07       	cpc	r27, r18
 110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
 112:	af d1       	rcall	.+862    	; 0x472 <main>
 114:	ef c2       	rjmp	.+1502   	; 0x6f4 <_exit>

00000116 <__bad_interrupt>:
 116:	74 cf       	rjmp	.-280    	; 0x0 <__vectors>

00000118 <_ZN10Controller13initInteruptsEv>:
}

void Controller::initInterupts()
{
     // rising edge interupts - INT2 + INT3
    EICRA |= 0b11110000;
 118:	e9 e6       	ldi	r30, 0x69	; 105
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 6f       	ori	r24, 0xF0	; 240
 120:	80 83       	st	Z, r24
    // Enable INT2 + INT3
    EIMSK |= 0b00001100;
 122:	8d b3       	in	r24, 0x1d	; 29
 124:	8c 60       	ori	r24, 0x0C	; 12
 126:	8d bb       	out	0x1d, r24	; 29
    sei();
 128:	78 94       	sei
 12a:	08 95       	ret

0000012c <_ZN10ControllerC1EP5MotorP5SoundP3Lys>:

int counter = 0;

Controller::Controller(Motor *motor, Sound *sound, Lys *lys){
    
    this->motor = motor; 
 12c:	fc 01       	movw	r30, r24
 12e:	73 83       	std	Z+3, r23	; 0x03
 130:	62 83       	std	Z+2, r22	; 0x02
    this->sound = sound;
 132:	55 83       	std	Z+5, r21	; 0x05
 134:	44 83       	std	Z+4, r20	; 0x04
    this->lys = lys;
 136:	37 83       	std	Z+7, r19	; 0x07
 138:	26 83       	std	Z+6, r18	; 0x06

    controllerCounter = 1;
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	31 83       	std	Z+1, r19	; 0x01
 140:	20 83       	st	Z, r18
    
    initInterupts();
 142:	ea cf       	rjmp	.-44     	; 0x118 <_ZN10Controller13initInteruptsEv>
 144:	08 95       	ret

00000146 <_ZN10Controller8startCarEv>:
    EIMSK |= 0b00001100;
    sei();
}

void Controller::startCar()
{
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
    sound->volume(5);
 14c:	65 e0       	ldi	r22, 0x05	; 5
 14e:	8c 81       	ldd	r24, Y+4	; 0x04
 150:	9d 81       	ldd	r25, Y+5	; 0x05
 152:	3b d2       	rcall	.+1142   	; 0x5ca <_ZN5Sound6volumeEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	8f e3       	ldi	r24, 0x3F	; 63
 156:	9c e9       	ldi	r25, 0x9C	; 156
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <_ZN10Controller8startCarEv+0x12>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <_ZN10Controller8startCarEv+0x18>
 15e:	00 00       	nop
    _delay_ms(10);
    sound->play(1);
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	8c 81       	ldd	r24, Y+4	; 0x04
 164:	9d 81       	ldd	r25, Y+5	; 0x05
 166:	22 d2       	rcall	.+1092   	; 0x5ac <_ZN5Sound4playEh>
 168:	9f ef       	ldi	r25, 0xFF	; 255
 16a:	23 e2       	ldi	r18, 0x23	; 35
 16c:	34 ef       	ldi	r19, 0xF4	; 244
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	91 50       	subi	r25, 0x01	; 1
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	30 40       	sbci	r19, 0x00	; 0
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	d9 f7       	brne	.-10     	; 0x170 <_ZN10Controller8startCarEv+0x2a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <_ZN10Controller8startCarEv+0x36>
 17c:	00 00       	nop

    _delay_ms(6000); // wait for song
    lys->setFrontItens(100);
 17e:	64 e6       	ldi	r22, 0x64	; 100
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	8e 81       	ldd	r24, Y+6	; 0x06
 184:	9f 81       	ldd	r25, Y+7	; 0x07
 186:	4c d1       	rcall	.+664    	; 0x420 <_ZN3Lys13setFrontItensEi>
    lys->setBakItens(20);
 188:	64 e1       	ldi	r22, 0x14	; 20
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	8e 81       	ldd	r24, Y+6	; 0x06
 18e:	9f 81       	ldd	r25, Y+7	; 0x07
 190:	4d d1       	rcall	.+666    	; 0x42c <_ZN3Lys11setBakItensEi>
    motor->forward(2);
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	9b 81       	ldd	r25, Y+3	; 0x03
 198:	a0 d1       	rcall	.+832    	; 0x4da <_ZN5Motor7forwardEh>

    // Acceleration
    motor->forward(3);
 19a:	63 e0       	ldi	r22, 0x03	; 3
 19c:	8a 81       	ldd	r24, Y+2	; 0x02
 19e:	9b 81       	ldd	r25, Y+3	; 0x03
 1a0:	9c d1       	rcall	.+824    	; 0x4da <_ZN5Motor7forwardEh>
 1a2:	9f ef       	ldi	r25, 0xFF	; 255
 1a4:	29 e6       	ldi	r18, 0x69	; 105
 1a6:	38 e1       	ldi	r19, 0x18	; 24
 1a8:	91 50       	subi	r25, 0x01	; 1
 1aa:	20 40       	sbci	r18, 0x00	; 0
 1ac:	30 40       	sbci	r19, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <_ZN10Controller8startCarEv+0x62>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <_ZN10Controller8startCarEv+0x6c>
 1b2:	00 00       	nop
    _delay_ms(500);
    motor->forward(4);
 1b4:	64 e0       	ldi	r22, 0x04	; 4
 1b6:	8a 81       	ldd	r24, Y+2	; 0x02
 1b8:	9b 81       	ldd	r25, Y+3	; 0x03
 1ba:	8f d1       	rcall	.+798    	; 0x4da <_ZN5Motor7forwardEh>
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	99 e6       	ldi	r25, 0x69	; 105
 1c0:	28 e1       	ldi	r18, 0x18	; 24
 1c2:	81 50       	subi	r24, 0x01	; 1
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	20 40       	sbci	r18, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <_ZN10Controller8startCarEv+0x7c>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <_ZN10Controller8startCarEv+0x86>
 1cc:	00 00       	nop
    _delay_ms(500);
    motor->forward(5);
 1ce:	65 e0       	ldi	r22, 0x05	; 5
 1d0:	8a 81       	ldd	r24, Y+2	; 0x02
 1d2:	9b 81       	ldd	r25, Y+3	; 0x03
 1d4:	82 d1       	rcall	.+772    	; 0x4da <_ZN5Motor7forwardEh>
 1d6:	df 91       	pop	r29
}
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <_ZN10Controller16reactToInteruptsEv>:
 1dc:	cf 93       	push	r28


void Controller::reactToInterupts()
{
 1de:	df 93       	push	r29
    switch (counter) {
 1e0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1e4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1e8:	f9 01       	movw	r30, r18
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	e7 30       	cpi	r30, 0x07	; 7
 1ee:	f1 05       	cpc	r31, r1
 1f0:	08 f0       	brcs	.+2      	; 0x1f4 <_ZN10Controller16reactToInteruptsEv+0x18>
 1f2:	ab c0       	rjmp	.+342    	; 0x34a <_ZN10Controller16reactToInteruptsEv+0x16e>
 1f4:	ec 01       	movw	r28, r24
 1f6:	88 27       	eor	r24, r24
 1f8:	ee 58       	subi	r30, 0x8E	; 142
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	8f 4f       	sbci	r24, 0xFF	; 255
 1fe:	72 c2       	rjmp	.+1252   	; 0x6e4 <__tablejump2__>
        case 1:
            if (controllerCounter == counter) // only true once
 200:	88 81       	ld	r24, Y
 202:	99 81       	ldd	r25, Y+1	; 0x01
 204:	28 17       	cp	r18, r24
 206:	39 07       	cpc	r19, r25
 208:	09 f0       	breq	.+2      	; 0x20c <_ZN10Controller16reactToInteruptsEv+0x30>
 20a:	9f c0       	rjmp	.+318    	; 0x34a <_ZN10Controller16reactToInteruptsEv+0x16e>
            {
                controllerCounter++;
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	99 83       	std	Y+1, r25	; 0x01
 210:	88 83       	st	Y, r24
                sound->play(7); 
 212:	67 e0       	ldi	r22, 0x07	; 7
 214:	8c 81       	ldd	r24, Y+4	; 0x04
 216:	9d 81       	ldd	r25, Y+5	; 0x05
 218:	c9 d1       	rcall	.+914    	; 0x5ac <_ZN5Sound4playEh>
                lys->setFrontItens(0);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	8e 81       	ldd	r24, Y+6	; 0x06
 220:	9f 81       	ldd	r25, Y+7	; 0x07
 222:	fe d0       	rcall	.+508    	; 0x420 <_ZN3Lys13setFrontItensEi>
                lys->setBakItens(0);
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	8e 81       	ldd	r24, Y+6	; 0x06
 22a:	9f 81       	ldd	r25, Y+7	; 0x07
 22c:	ff d0       	rcall	.+510    	; 0x42c <_ZN3Lys11setBakItensEi>
 22e:	8d c0       	rjmp	.+282    	; 0x34a <_ZN10Controller16reactToInteruptsEv+0x16e>
			}
            break;
        case 2:
            if (controllerCounter == counter)
 230:	88 81       	ld	r24, Y
 232:	99 81       	ldd	r25, Y+1	; 0x01
 234:	28 17       	cp	r18, r24
 236:	39 07       	cpc	r19, r25
 238:	09 f0       	breq	.+2      	; 0x23c <_ZN10Controller16reactToInteruptsEv+0x60>
 23a:	87 c0       	rjmp	.+270    	; 0x34a <_ZN10Controller16reactToInteruptsEv+0x16e>
            {
                controllerCounter++;
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	99 83       	std	Y+1, r25	; 0x01
                sound->play(7); 
 240:	88 83       	st	Y, r24
 242:	67 e0       	ldi	r22, 0x07	; 7
 244:	8c 81       	ldd	r24, Y+4	; 0x04
 246:	9d 81       	ldd	r25, Y+5	; 0x05
                lys->setFrontItens(100);
 248:	b1 d1       	rcall	.+866    	; 0x5ac <_ZN5Sound4playEh>
 24a:	64 e6       	ldi	r22, 0x64	; 100
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	8e 81       	ldd	r24, Y+6	; 0x06
 250:	9f 81       	ldd	r25, Y+7	; 0x07
                lys->setBakItens(20);
 252:	e6 d0       	rcall	.+460    	; 0x420 <_ZN3Lys13setFrontItensEi>
 254:	64 e1       	ldi	r22, 0x14	; 20
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	8e 81       	ldd	r24, Y+6	; 0x06
 25a:	9f 81       	ldd	r25, Y+7	; 0x07
 25c:	e7 d0       	rcall	.+462    	; 0x42c <_ZN3Lys11setBakItensEi>
 25e:	75 c0       	rjmp	.+234    	; 0x34a <_ZN10Controller16reactToInteruptsEv+0x16e>
            }
            break;
            

        case 3:
            if (controllerCounter == counter)
 260:	88 81       	ld	r24, Y
 262:	99 81       	ldd	r25, Y+1	; 0x01
 264:	28 17       	cp	r18, r24
 266:	39 07       	cpc	r19, r25
 268:	09 f0       	breq	.+2      	; 0x26c <_ZN10Controller16reactToInteruptsEv+0x90>
            {
                controllerCounter++;
 26a:	6f c0       	rjmp	.+222    	; 0x34a <_ZN10Controller16reactToInteruptsEv+0x16e>
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	99 83       	std	Y+1, r25	; 0x01
                sound->play(7); 
 270:	88 83       	st	Y, r24
 272:	67 e0       	ldi	r22, 0x07	; 7
 274:	8c 81       	ldd	r24, Y+4	; 0x04
 276:	9d 81       	ldd	r25, Y+5	; 0x05
                lys->setFrontItens(0);
 278:	99 d1       	rcall	.+818    	; 0x5ac <_ZN5Sound4playEh>
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	8e 81       	ldd	r24, Y+6	; 0x06
 280:	9f 81       	ldd	r25, Y+7	; 0x07
                lys->setBakItens(0);
 282:	ce d0       	rcall	.+412    	; 0x420 <_ZN3Lys13setFrontItensEi>
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	8e 81       	ldd	r24, Y+6	; 0x06
 28a:	9f 81       	ldd	r25, Y+7	; 0x07
 28c:	cf d0       	rcall	.+414    	; 0x42c <_ZN3Lys11setBakItensEi>
 28e:	5d c0       	rjmp	.+186    	; 0x34a <_ZN10Controller16reactToInteruptsEv+0x16e>
            }
            break;
                
        
        case 4:
            if (controllerCounter == counter)
 290:	88 81       	ld	r24, Y
 292:	99 81       	ldd	r25, Y+1	; 0x01
 294:	28 17       	cp	r18, r24
 296:	39 07       	cpc	r19, r25
 298:	09 f0       	breq	.+2      	; 0x29c <_ZN10Controller16reactToInteruptsEv+0xc0>
            {
                controllerCounter++;
 29a:	57 c0       	rjmp	.+174    	; 0x34a <_ZN10Controller16reactToInteruptsEv+0x16e>
 29c:	01 96       	adiw	r24, 0x01	; 1
                sound->play(7); 
 29e:	99 83       	std	Y+1, r25	; 0x01
 2a0:	88 83       	st	Y, r24
 2a2:	67 e0       	ldi	r22, 0x07	; 7
 2a4:	8c 81       	ldd	r24, Y+4	; 0x04
                lys->setFrontItens(100);
 2a6:	9d 81       	ldd	r25, Y+5	; 0x05
 2a8:	81 d1       	rcall	.+770    	; 0x5ac <_ZN5Sound4playEh>
 2aa:	64 e6       	ldi	r22, 0x64	; 100
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	8e 81       	ldd	r24, Y+6	; 0x06
 2b0:	9f 81       	ldd	r25, Y+7	; 0x07
                lys->setBakItens(20);
 2b2:	b6 d0       	rcall	.+364    	; 0x420 <_ZN3Lys13setFrontItensEi>
 2b4:	64 e1       	ldi	r22, 0x14	; 20
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	8e 81       	ldd	r24, Y+6	; 0x06
 2ba:	9f 81       	ldd	r25, Y+7	; 0x07
 2bc:	b7 d0       	rcall	.+366    	; 0x42c <_ZN3Lys11setBakItensEi>
            }
            break;

        case 5:
            if (controllerCounter == counter)
 2be:	45 c0       	rjmp	.+138    	; 0x34a <_ZN10Controller16reactToInteruptsEv+0x16e>
 2c0:	88 81       	ld	r24, Y
 2c2:	99 81       	ldd	r25, Y+1	; 0x01
 2c4:	28 17       	cp	r18, r24
 2c6:	39 07       	cpc	r19, r25
            {
                controllerCounter++;
 2c8:	09 f0       	breq	.+2      	; 0x2cc <_ZN10Controller16reactToInteruptsEv+0xf0>
 2ca:	3f c0       	rjmp	.+126    	; 0x34a <_ZN10Controller16reactToInteruptsEv+0x16e>
 2cc:	01 96       	adiw	r24, 0x01	; 1
                sound->play(7); 
 2ce:	99 83       	std	Y+1, r25	; 0x01
 2d0:	88 83       	st	Y, r24
 2d2:	67 e0       	ldi	r22, 0x07	; 7
 2d4:	8c 81       	ldd	r24, Y+4	; 0x04
                lys->setFrontItens(0);
 2d6:	9d 81       	ldd	r25, Y+5	; 0x05
 2d8:	69 d1       	rcall	.+722    	; 0x5ac <_ZN5Sound4playEh>
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	8e 81       	ldd	r24, Y+6	; 0x06
 2e0:	9f 81       	ldd	r25, Y+7	; 0x07
                lys->setBakItens(0);
 2e2:	9e d0       	rcall	.+316    	; 0x420 <_ZN3Lys13setFrontItensEi>
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	8e 81       	ldd	r24, Y+6	; 0x06
 2ea:	9f 81       	ldd	r25, Y+7	; 0x07
 2ec:	9f d0       	rcall	.+318    	; 0x42c <_ZN3Lys11setBakItensEi>
            }
            break;
        
        case 6:
            if (controllerCounter == counter)
 2ee:	2d c0       	rjmp	.+90     	; 0x34a <_ZN10Controller16reactToInteruptsEv+0x16e>
 2f0:	88 81       	ld	r24, Y
 2f2:	99 81       	ldd	r25, Y+1	; 0x01
 2f4:	28 17       	cp	r18, r24
            {
                controllerCounter++;
 2f6:	39 07       	cpc	r19, r25
 2f8:	41 f5       	brne	.+80     	; 0x34a <_ZN10Controller16reactToInteruptsEv+0x16e>
                sound->play(7); 
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	99 83       	std	Y+1, r25	; 0x01
 2fe:	88 83       	st	Y, r24
 300:	67 e0       	ldi	r22, 0x07	; 7
 302:	8c 81       	ldd	r24, Y+4	; 0x04
                lys->setFrontItens(100);
 304:	9d 81       	ldd	r25, Y+5	; 0x05
 306:	52 d1       	rcall	.+676    	; 0x5ac <_ZN5Sound4playEh>
 308:	64 e6       	ldi	r22, 0x64	; 100
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	8e 81       	ldd	r24, Y+6	; 0x06
                lys->setBakItens(20);
 30e:	9f 81       	ldd	r25, Y+7	; 0x07
 310:	87 d0       	rcall	.+270    	; 0x420 <_ZN3Lys13setFrontItensEi>
 312:	64 e1       	ldi	r22, 0x14	; 20
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	8e 81       	ldd	r24, Y+6	; 0x06
 318:	9f 81       	ldd	r25, Y+7	; 0x07
            }
            break;

        case 7:
            if (controllerCounter == counter)
 31a:	88 d0       	rcall	.+272    	; 0x42c <_ZN3Lys11setBakItensEi>
 31c:	16 c0       	rjmp	.+44     	; 0x34a <_ZN10Controller16reactToInteruptsEv+0x16e>
 31e:	88 81       	ld	r24, Y
 320:	99 81       	ldd	r25, Y+1	; 0x01
            {
                controllerCounter++;
 322:	28 17       	cp	r18, r24
 324:	39 07       	cpc	r19, r25
 326:	89 f4       	brne	.+34     	; 0x34a <_ZN10Controller16reactToInteruptsEv+0x16e>
                sound->play(7); 
 328:	01 96       	adiw	r24, 0x01	; 1
 32a:	99 83       	std	Y+1, r25	; 0x01
 32c:	88 83       	st	Y, r24
 32e:	67 e0       	ldi	r22, 0x07	; 7
 330:	8c 81       	ldd	r24, Y+4	; 0x04
                lys->setFrontItens(0);
 332:	9d 81       	ldd	r25, Y+5	; 0x05
 334:	3b d1       	rcall	.+630    	; 0x5ac <_ZN5Sound4playEh>
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	8e 81       	ldd	r24, Y+6	; 0x06
 33c:	9f 81       	ldd	r25, Y+7	; 0x07
                lys->setBakItens(0);
 33e:	70 d0       	rcall	.+224    	; 0x420 <_ZN3Lys13setFrontItensEi>
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	8e 81       	ldd	r24, Y+6	; 0x06
 346:	9f 81       	ldd	r25, Y+7	; 0x07
 348:	71 d0       	rcall	.+226    	; 0x42c <_ZN3Lys11setBakItensEi>
            break;
        default:
            break;
        // flere cases
    }
}
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <__vector_3>:

    ISR(INT2_vect)
    {
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	2f 93       	push	r18
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
        // disable interrupts
    EIMSK &= ~(1 << INT3);
 360:	8d b3       	in	r24, 0x1d	; 29
 362:	87 7f       	andi	r24, 0xF7	; 247
 364:	8d bb       	out	0x1d, r24	; 29
    EIMSK &= ~(1 << INT2);
 366:	8d b3       	in	r24, 0x1d	; 29
 368:	8b 7f       	andi	r24, 0xFB	; 251
 36a:	8d bb       	out	0x1d, r24	; 29

    counter++;
 36c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 370:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 37a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 37e:	2f ef       	ldi	r18, 0xFF	; 255
 380:	87 ea       	ldi	r24, 0xA7	; 167
 382:	91 e6       	ldi	r25, 0x61	; 97
 384:	21 50       	subi	r18, 0x01	; 1
 386:	80 40       	sbci	r24, 0x00	; 0
 388:	90 40       	sbci	r25, 0x00	; 0
 38a:	e1 f7       	brne	.-8      	; 0x384 <__vector_3+0x34>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <__vector_3+0x3e>
 38e:	00 00       	nop
    _delay_ms(2000);

    // reset interrupt flags and enable again
    EIFR |= (1 << INTF2);
 390:	8c b3       	in	r24, 0x1c	; 28
 392:	84 60       	ori	r24, 0x04	; 4
 394:	8c bb       	out	0x1c, r24	; 28
    EIFR |= (1 << INTF3);
 396:	8c b3       	in	r24, 0x1c	; 28
 398:	88 60       	ori	r24, 0x08	; 8
 39a:	8c bb       	out	0x1c, r24	; 28
    EIMSK |= (1 << INT2);
 39c:	8d b3       	in	r24, 0x1d	; 29
 39e:	84 60       	ori	r24, 0x04	; 4
 3a0:	8d bb       	out	0x1d, r24	; 29
    EIMSK |= (1 << INT3);
 3a2:	8d b3       	in	r24, 0x1d	; 29
 3a4:	88 60       	ori	r24, 0x08	; 8
 3a6:	8d bb       	out	0x1d, r24	; 29
}
 3a8:	9f 91       	pop	r25
 3aa:	8f 91       	pop	r24
 3ac:	2f 91       	pop	r18
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <__vector_4>:

ISR(INT3_vect)
{
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	2f 93       	push	r18
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
    // disable interrupts
    EIMSK &= ~(1 << INT3);
 3c8:	8d b3       	in	r24, 0x1d	; 29
 3ca:	87 7f       	andi	r24, 0xF7	; 247
 3cc:	8d bb       	out	0x1d, r24	; 29
    EIMSK &= ~(1 << INT2);
 3ce:	8d b3       	in	r24, 0x1d	; 29
 3d0:	8b 7f       	andi	r24, 0xFB	; 251
 3d2:	8d bb       	out	0x1d, r24	; 29

    counter++;
 3d4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 3d8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 3e2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 3e6:	2f ef       	ldi	r18, 0xFF	; 255
 3e8:	87 ea       	ldi	r24, 0xA7	; 167
 3ea:	91 e6       	ldi	r25, 0x61	; 97
 3ec:	21 50       	subi	r18, 0x01	; 1
 3ee:	80 40       	sbci	r24, 0x00	; 0
 3f0:	90 40       	sbci	r25, 0x00	; 0
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <__vector_4+0x34>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <__vector_4+0x3e>
 3f6:	00 00       	nop
    _delay_ms(2000);

    // reset interrupt flags and enable again
    EIFR |= (1 << INTF3);
 3f8:	8c b3       	in	r24, 0x1c	; 28
 3fa:	88 60       	ori	r24, 0x08	; 8
 3fc:	8c bb       	out	0x1c, r24	; 28
    EIFR |= (1 << INTF2);
 3fe:	8c b3       	in	r24, 0x1c	; 28
 400:	84 60       	ori	r24, 0x04	; 4
 402:	8c bb       	out	0x1c, r24	; 28
    EIMSK |= (1 << INT3);
 404:	8d b3       	in	r24, 0x1d	; 29
 406:	88 60       	ori	r24, 0x08	; 8
 408:	8d bb       	out	0x1d, r24	; 29
    EIMSK |= (1 << INT2);
 40a:	8d b3       	in	r24, 0x1d	; 29
 40c:	84 60       	ori	r24, 0x04	; 4
 40e:	8d bb       	out	0x1d, r24	; 29
}
 410:	9f 91       	pop	r25
 412:	8f 91       	pop	r24
 414:	2f 91       	pop	r18
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <_ZN3Lys13setFrontItensEi>:
}

// Takes % intensity returns pwm on portb ben 7
void Lys::setFrontItens(int intensitet){
	if (intensitet >= 0 || intensitet <= 100){
		frontLys = intensitet;
 420:	fc 01       	movw	r30, r24
 422:	60 83       	st	Z, r22
 424:	71 83       	std	Z+1, r23	; 0x01
	}
	else{
		frontLys = 1;
	}
	OCR0A = (255 / 100) * frontLys;
 426:	66 0f       	add	r22, r22
 428:	67 bd       	out	0x27, r22	; 39
 42a:	08 95       	ret

0000042c <_ZN3Lys11setBakItensEi>:

// Takes % intensity returns pwm on portb ben 5
void Lys::setBakItens(int intensitet){
	
	if (intensitet >= 0 || intensitet <= 100){
		bakLys = intensitet;
 42c:	fc 01       	movw	r30, r24
 42e:	73 83       	std	Z+3, r23	; 0x03
 430:	62 83       	std	Z+2, r22	; 0x02
	}
	else{
		bakLys = 1;
	}
	
	OCR1A = (255 / 100) * bakLys;
 432:	66 0f       	add	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 43a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 43e:	08 95       	ret

00000440 <_ZN3LysC1Ev>:
#include "avr/io.h"
#include "Lys.h"

// default constructor
Lys::Lys()
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	ec 01       	movw	r28, r24
{
	DDRB = 0xFF;
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	84 b9       	out	0x04, r24	; 4
	setFrontItens(0);
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	ce 01       	movw	r24, r28
 450:	e7 df       	rcall	.-50     	; 0x420 <_ZN3Lys13setFrontItensEi>
	setBakItens(0);
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	ce 01       	movw	r24, r28
 458:	e9 df       	rcall	.-46     	; 0x42c <_ZN3Lys11setBakItensEi>
	TCCR0A = 0b10000011;
 45a:	83 e8       	ldi	r24, 0x83	; 131
 45c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011;
 45e:	83 e0       	ldi	r24, 0x03	; 3
 460:	85 bd       	out	0x25, r24	; 37
	
	TCCR1A = 0b10000001;
 462:	91 e8       	ldi	r25, 0x81	; 129
 464:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000011;
 468:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	
}
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <main>:
#include "motorstyring.h"
#include "lys.h"
#include "sound.h"
#include "controller.h"

int main(){
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	67 97       	sbiw	r28, 0x17	; 23
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	de bf       	out	0x3e, r29	; 62
 482:	0f be       	out	0x3f, r0	; 63
 484:	cd bf       	out	0x3d, r28	; 61
     
    Motor motor;
 486:	ce 01       	movw	r24, r28
 488:	01 96       	adiw	r24, 0x01	; 1
 48a:	19 d0       	rcall	.+50     	; 0x4be <_ZN5MotorC1Ev>
    Sound sound;
 48c:	ce 01       	movw	r24, r28
 48e:	02 96       	adiw	r24, 0x02	; 2
 490:	aa d0       	rcall	.+340    	; 0x5e6 <_ZN5SoundC1Ev>
    Lys lys;
 492:	ce 01       	movw	r24, r28
 494:	0c 96       	adiw	r24, 0x0c	; 12
 496:	d4 df       	rcall	.-88     	; 0x440 <_ZN3LysC1Ev>
    Controller controller(&motor, &sound, &lys);
 498:	9e 01       	movw	r18, r28
 49a:	24 5f       	subi	r18, 0xF4	; 244
 49c:	3f 4f       	sbci	r19, 0xFF	; 255
 49e:	ae 01       	movw	r20, r28
 4a0:	4e 5f       	subi	r20, 0xFE	; 254
 4a2:	5f 4f       	sbci	r21, 0xFF	; 255
 4a4:	be 01       	movw	r22, r28
 4a6:	6f 5f       	subi	r22, 0xFF	; 255
 4a8:	7f 4f       	sbci	r23, 0xFF	; 255
 4aa:	ce 01       	movw	r24, r28
 4ac:	40 96       	adiw	r24, 0x10	; 16

    controller.startCar();
 4ae:	3e de       	rcall	.-900    	; 0x12c <_ZN10ControllerC1EP5MotorP5SoundP3Lys>
 4b0:	ce 01       	movw	r24, r28
 4b2:	40 96       	adiw	r24, 0x10	; 16

    while (true) {
        controller.reactToInterupts();
 4b4:	48 de       	rcall	.-880    	; 0x146 <_ZN10Controller8startCarEv>
 4b6:	ce 01       	movw	r24, r28
 4b8:	40 96       	adiw	r24, 0x10	; 16
 4ba:	90 de       	rcall	.-736    	; 0x1dc <_ZN10Controller16reactToInteruptsEv>
 4bc:	fc cf       	rjmp	.-8      	; 0x4b6 <main+0x44>

000004be <_ZN5MotorC1Ev>:
#include "motorstyring.h"
#include <avr/io.h> 

 // PB outputs and set to 0
Motor::Motor(){
	  DDRE = 0xFF;
 4be:	8f ef       	ldi	r24, 0xFF	; 255
 4c0:	8d b9       	out	0x0d, r24	; 13
	  PORTE = 0;
 4c2:	1e b8       	out	0x0e, r1	; 14
	  // Mode = 3 (PWM, Phase Correct, 10 bit)
	  // Set OC3A on match down counting / Clear OC3A on match up counting - PE 3
	  // Clock prescaler = 1
	  TCCR3A = 0b10000011;
 4c4:	83 e8       	ldi	r24, 0x83	; 131
 4c6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
	  TCCR3B = 0b00000011;
 4ca:	83 e0       	ldi	r24, 0x03	; 3
 4cc:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
	  // Duty cycle = 0%
	  OCR3B = 0;
 4d0:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
 4d4:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
 4d8:	08 95       	ret

000004da <_ZN5Motor7forwardEh>:
}

void Motor::forward(unsigned char speed){
    unsigned char s = speed;
    if (s != 1 && s != 2 && s !=3 && s !=4 && s !=5 && s !=6){
 4da:	8f ef       	ldi	r24, 0xFF	; 255
 4dc:	86 0f       	add	r24, r22
 4de:	86 30       	cpi	r24, 0x06	; 6
 4e0:	d0 f5       	brcc	.+116    	; 0x556 <_ZN5Motor7forwardEh+0x7c>
        return;
    }
    PORTB |= 0b00000001;
 4e2:	85 b1       	in	r24, 0x05	; 5
 4e4:	81 60       	ori	r24, 0x01	; 1
 4e6:	85 b9       	out	0x05, r24	; 5

    switch (s) {
 4e8:	63 30       	cpi	r22, 0x03	; 3
 4ea:	d1 f0       	breq	.+52     	; 0x520 <_ZN5Motor7forwardEh+0x46>
 4ec:	28 f4       	brcc	.+10     	; 0x4f8 <_ZN5Motor7forwardEh+0x1e>
 4ee:	61 30       	cpi	r22, 0x01	; 1
 4f0:	49 f0       	breq	.+18     	; 0x504 <_ZN5Motor7forwardEh+0x2a>
 4f2:	62 30       	cpi	r22, 0x02	; 2
 4f4:	71 f0       	breq	.+28     	; 0x512 <_ZN5Motor7forwardEh+0x38>
 4f6:	08 95       	ret
 4f8:	65 30       	cpi	r22, 0x05	; 5
 4fa:	01 f1       	breq	.+64     	; 0x53c <_ZN5Motor7forwardEh+0x62>
 4fc:	c0 f0       	brcs	.+48     	; 0x52e <_ZN5Motor7forwardEh+0x54>
 4fe:	66 30       	cpi	r22, 0x06	; 6
 500:	21 f1       	breq	.+72     	; 0x54a <_ZN5Motor7forwardEh+0x70>
 502:	08 95       	ret
        case 1:
        OCR3A = 50;
 504:	82 e3       	ldi	r24, 0x32	; 50
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 50c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
        return;
 510:	08 95       	ret
        
        case 2:
        OCR3A = 100;
 512:	84 e6       	ldi	r24, 0x64	; 100
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 51a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
        return;
 51e:	08 95       	ret

        case 3:
        OCR3A = 200;
 520:	88 ec       	ldi	r24, 0xC8	; 200
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 528:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
        return;
 52c:	08 95       	ret

        case 4:
        OCR3A = 400;
 52e:	80 e9       	ldi	r24, 0x90	; 144
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 536:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
        return;
 53a:	08 95       	ret

        case 5:
        OCR3A = 800;
 53c:	80 e2       	ldi	r24, 0x20	; 32
 53e:	93 e0       	ldi	r25, 0x03	; 3
 540:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 544:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
        return;
 548:	08 95       	ret

        case 6:
        OCR3A = 1020;
 54a:	8c ef       	ldi	r24, 0xFC	; 252
 54c:	93 e0       	ldi	r25, 0x03	; 3
 54e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 552:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 556:	08 95       	ret

00000558 <_ZN5Sound8checksumEv>:
	CMD = 0x16;
	PARA1 = 0x00;
	PARA2 = 0x00;
	checksum();
	send();
}
 558:	fc 01       	movw	r30, r24
 55a:	83 81       	ldd	r24, Z+3	; 0x03
 55c:	21 81       	ldd	r18, Z+1	; 0x01
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	28 0f       	add	r18, r24
 562:	31 1d       	adc	r19, r1
 564:	84 81       	ldd	r24, Z+4	; 0x04
 566:	28 0f       	add	r18, r24
 568:	31 1d       	adc	r19, r1
 56a:	85 81       	ldd	r24, Z+5	; 0x05
 56c:	28 0f       	add	r18, r24
 56e:	31 1d       	adc	r19, r1
 570:	31 95       	neg	r19
 572:	21 95       	neg	r18
 574:	31 09       	sbc	r19, r1
 576:	31 87       	std	Z+9, r19	; 0x09
 578:	20 87       	std	Z+8, r18	; 0x08
 57a:	36 83       	std	Z+6, r19	; 0x06
 57c:	27 83       	std	Z+7, r18	; 0x07
 57e:	08 95       	ret

00000580 <_ZN5Sound4sendEv>:
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	ec 01       	movw	r28, r24
 586:	88 81       	ld	r24, Y
 588:	84 d0       	rcall	.+264    	; 0x692 <SendChar>
 58a:	8b 81       	ldd	r24, Y+3	; 0x03
 58c:	82 d0       	rcall	.+260    	; 0x692 <SendChar>
 58e:	89 81       	ldd	r24, Y+1	; 0x01
 590:	80 d0       	rcall	.+256    	; 0x692 <SendChar>
 592:	8c 81       	ldd	r24, Y+4	; 0x04
 594:	7e d0       	rcall	.+252    	; 0x692 <SendChar>
 596:	8d 81       	ldd	r24, Y+5	; 0x05
 598:	7c d0       	rcall	.+248    	; 0x692 <SendChar>
 59a:	8e 81       	ldd	r24, Y+6	; 0x06
 59c:	7a d0       	rcall	.+244    	; 0x692 <SendChar>
 59e:	8f 81       	ldd	r24, Y+7	; 0x07
 5a0:	78 d0       	rcall	.+240    	; 0x692 <SendChar>
 5a2:	8a 81       	ldd	r24, Y+2	; 0x02
 5a4:	76 d0       	rcall	.+236    	; 0x692 <SendChar>
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	08 95       	ret

000005ac <_ZN5Sound4playEh>:
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	ec 01       	movw	r28, r24
 5b2:	8f e0       	ldi	r24, 0x0F	; 15
 5b4:	8b 83       	std	Y+3, r24	; 0x03
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	8c 83       	std	Y+4, r24	; 0x04
 5ba:	6d 83       	std	Y+5, r22	; 0x05
 5bc:	ce 01       	movw	r24, r28
 5be:	cc df       	rcall	.-104    	; 0x558 <_ZN5Sound8checksumEv>
 5c0:	ce 01       	movw	r24, r28
 5c2:	de df       	rcall	.-68     	; 0x580 <_ZN5Sound4sendEv>
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	08 95       	ret

000005ca <_ZN5Sound6volumeEh>:
void Sound::volume(unsigned char param) {
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	ec 01       	movw	r28, r24
	CMD = 0x06;
 5d0:	86 e0       	ldi	r24, 0x06	; 6
 5d2:	8b 83       	std	Y+3, r24	; 0x03
	PARA1 = 0x00;
 5d4:	1c 82       	std	Y+4, r1	; 0x04
	PARA2 = param;
 5d6:	6d 83       	std	Y+5, r22	; 0x05
	checksum();
 5d8:	ce 01       	movw	r24, r28
 5da:	be df       	rcall	.-132    	; 0x558 <_ZN5Sound8checksumEv>
	send();
 5dc:	ce 01       	movw	r24, r28
 5de:	d0 df       	rcall	.-96     	; 0x580 <_ZN5Sound4sendEv>
}
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <_ZN5SoundC1Ev>:
	SendChar(PARA2);
	SendChar(CHECKSUM1);
	SendChar(CHECKSUM2);
	SendChar(END);
}
Sound::Sound() {
 5e6:	fc 01       	movw	r30, r24
	START = 0x7E;
 5e8:	8e e7       	ldi	r24, 0x7E	; 126
 5ea:	80 83       	st	Z, r24
	FEEDBACK = 0;
 5ec:	11 82       	std	Z+1, r1	; 0x01
	END = 0xEF;
 5ee:	8f ee       	ldi	r24, 0xEF	; 239
 5f0:	82 83       	std	Z+2, r24	; 0x02
	InitUART(BAUD, 8, 1);
 5f2:	21 e0       	ldi	r18, 0x01	; 1
 5f4:	48 e0       	ldi	r20, 0x08	; 8
 5f6:	60 e8       	ldi	r22, 0x80	; 128
 5f8:	75 e2       	ldi	r23, 0x25	; 37
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	01 c0       	rjmp	.+2      	; 0x602 <InitUART>
 600:	08 95       	ret

00000602 <InitUART>:
{
	while(CharReady() == 0){
		
	}
	return UDR0;
}
 602:	0f 93       	push	r16
 604:	1f 93       	push	r17
 606:	cf 93       	push	r28
 608:	c4 2f       	mov	r28, r20
 60a:	42 2f       	mov	r20, r18
 60c:	8b 01       	movw	r16, r22
 60e:	9c 01       	movw	r18, r24
 610:	0c 52       	subi	r16, 0x2C	; 44
 612:	11 40       	sbci	r17, 0x01	; 1
 614:	21 09       	sbc	r18, r1
 616:	31 09       	sbc	r19, r1
 618:	05 3d       	cpi	r16, 0xD5	; 213
 61a:	10 4c       	sbci	r17, 0xC0	; 192
 61c:	21 40       	sbci	r18, 0x01	; 1
 61e:	31 05       	cpc	r19, r1
 620:	20 f4       	brcc	.+8      	; 0x62a <InitUART+0x28>
 622:	c5 30       	cpi	r28, 0x05	; 5
 624:	10 f0       	brcs	.+4      	; 0x62a <InitUART+0x28>
 626:	c9 30       	cpi	r28, 0x09	; 9
 628:	18 f0       	brcs	.+6      	; 0x630 <InitUART+0x2e>
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	62 d0       	rcall	.+196    	; 0x6f4 <_exit>
 630:	28 e1       	ldi	r18, 0x18	; 24
 632:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 636:	44 23       	and	r20, r20
 638:	29 f0       	breq	.+10     	; 0x644 <InitUART+0x42>
 63a:	e1 ec       	ldi	r30, 0xC1	; 193
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	20 81       	ld	r18, Z
 640:	20 68       	ori	r18, 0x80	; 128
 642:	20 83       	st	Z, r18
 644:	dc 01       	movw	r26, r24
 646:	cb 01       	movw	r24, r22
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	aa 1f       	adc	r26, r26
 64e:	bb 1f       	adc	r27, r27
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	aa 1f       	adc	r26, r26
 656:	bb 1f       	adc	r27, r27
 658:	9c 01       	movw	r18, r24
 65a:	ad 01       	movw	r20, r26
 65c:	22 0f       	add	r18, r18
 65e:	33 1f       	adc	r19, r19
 660:	44 1f       	adc	r20, r20
 662:	55 1f       	adc	r21, r21
 664:	22 0f       	add	r18, r18
 666:	33 1f       	adc	r19, r19
 668:	44 1f       	adc	r20, r20
 66a:	55 1f       	adc	r21, r21
 66c:	60 e0       	ldi	r22, 0x00	; 0
 66e:	74 e2       	ldi	r23, 0x24	; 36
 670:	84 ef       	ldi	r24, 0xF4	; 244
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	15 d0       	rcall	.+42     	; 0x6a0 <__udivmodsi4>
 676:	21 50       	subi	r18, 0x01	; 1
 678:	31 09       	sbc	r19, r1
 67a:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 67e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 682:	c5 50       	subi	r28, 0x05	; 5
 684:	cc 0f       	add	r28, r28
 686:	c0 93 c2 00 	sts	0x00C2, r28	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 68a:	cf 91       	pop	r28
 68c:	1f 91       	pop	r17
 68e:	0f 91       	pop	r16
 690:	08 95       	ret

00000692 <SendChar>:
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
	while((UCSR0A & 0b00100000) == 0){
 692:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 696:	95 ff       	sbrs	r25, 5
 698:	fc cf       	rjmp	.-8      	; 0x692 <SendChar>
		
	}
	UDR0 = Tegn;
 69a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 69e:	08 95       	ret

000006a0 <__udivmodsi4>:
 6a0:	a1 e2       	ldi	r26, 0x21	; 33
 6a2:	1a 2e       	mov	r1, r26
 6a4:	aa 1b       	sub	r26, r26
 6a6:	bb 1b       	sub	r27, r27
 6a8:	fd 01       	movw	r30, r26
 6aa:	0d c0       	rjmp	.+26     	; 0x6c6 <__udivmodsi4_ep>

000006ac <__udivmodsi4_loop>:
 6ac:	aa 1f       	adc	r26, r26
 6ae:	bb 1f       	adc	r27, r27
 6b0:	ee 1f       	adc	r30, r30
 6b2:	ff 1f       	adc	r31, r31
 6b4:	a2 17       	cp	r26, r18
 6b6:	b3 07       	cpc	r27, r19
 6b8:	e4 07       	cpc	r30, r20
 6ba:	f5 07       	cpc	r31, r21
 6bc:	20 f0       	brcs	.+8      	; 0x6c6 <__udivmodsi4_ep>
 6be:	a2 1b       	sub	r26, r18
 6c0:	b3 0b       	sbc	r27, r19
 6c2:	e4 0b       	sbc	r30, r20
 6c4:	f5 0b       	sbc	r31, r21

000006c6 <__udivmodsi4_ep>:
 6c6:	66 1f       	adc	r22, r22
 6c8:	77 1f       	adc	r23, r23
 6ca:	88 1f       	adc	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	1a 94       	dec	r1
 6d0:	69 f7       	brne	.-38     	; 0x6ac <__udivmodsi4_loop>
 6d2:	60 95       	com	r22
 6d4:	70 95       	com	r23
 6d6:	80 95       	com	r24
 6d8:	90 95       	com	r25
 6da:	9b 01       	movw	r18, r22
 6dc:	ac 01       	movw	r20, r24
 6de:	bd 01       	movw	r22, r26
 6e0:	cf 01       	movw	r24, r30
 6e2:	08 95       	ret

000006e4 <__tablejump2__>:
 6e4:	ee 0f       	add	r30, r30
 6e6:	ff 1f       	adc	r31, r31
 6e8:	88 1f       	adc	r24, r24
 6ea:	8b bf       	out	0x3b, r24	; 59
 6ec:	07 90       	elpm	r0, Z+
 6ee:	f6 91       	elpm	r31, Z
 6f0:	e0 2d       	mov	r30, r0
 6f2:	19 94       	eijmp

000006f4 <_exit>:
 6f4:	f8 94       	cli

000006f6 <__stop_program>:
 6f6:	ff cf       	rjmp	.-2      	; 0x6f6 <__stop_program>
