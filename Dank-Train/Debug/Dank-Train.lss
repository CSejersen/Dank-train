
Dank-Train.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000078c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000718  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  0000078c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023b3  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013fb  00000000  00000000  00002d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b16  00000000  00000000  0000410a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00004c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000af0  00000000  00000000  00004f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a83  00000000  00000000  000059f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006473  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7c c0       	rjmp	.+248    	; 0xfa <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	be c1       	rjmp	.+892    	; 0x38a <__vector_3>
   e:	00 00       	nop
  10:	f0 c1       	rjmp	.+992    	; 0x3f2 <__vector_4>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
  e2:	00 00       	nop
  e4:	09 01       	movw	r0, r18
  e6:	17 01       	movw	r2, r14
  e8:	25 01       	movw	r4, r10
  ea:	37 01       	movw	r6, r14
  ec:	49 01       	movw	r8, r18
  ee:	57 01       	movw	r10, r14
  f0:	6e 01       	movw	r12, r28
  f2:	78 01       	movw	r14, r16
  f4:	8f 01       	movw	r16, r30
  f6:	9c 01       	movw	r18, r24
  f8:	a9 01       	movw	r20, r18

000000fa <__ctors_end>:
  fa:	11 24       	eor	r1, r1
  fc:	1f be       	out	0x3f, r1	; 63
  fe:	cf ef       	ldi	r28, 0xFF	; 255
 100:	d1 e2       	ldi	r29, 0x21	; 33
 102:	de bf       	out	0x3e, r29	; 62
 104:	cd bf       	out	0x3d, r28	; 61
 106:	00 e0       	ldi	r16, 0x00	; 0
 108:	0c bf       	out	0x3c, r16	; 60

0000010a <__do_clear_bss>:
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a2 30       	cpi	r26, 0x02	; 2
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	c8 d1       	rcall	.+912    	; 0x4ac <main>
 11c:	fb c2       	rjmp	.+1526   	; 0x714 <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <_ZN10Controller13initInteruptsEv>:
}

void Controller::initInterupts()
{
     // rising edge interupts - INT2 + INT3
    EICRA |= 0b11110000;
 120:	e9 e6       	ldi	r30, 0x69	; 105
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 6f       	ori	r24, 0xF0	; 240
 128:	80 83       	st	Z, r24
    // Enable INT2 + INT3
    EIMSK |= 0b00001100;
 12a:	8d b3       	in	r24, 0x1d	; 29
 12c:	8c 60       	ori	r24, 0x0C	; 12
 12e:	8d bb       	out	0x1d, r24	; 29
    sei();
 130:	78 94       	sei
 132:	08 95       	ret

00000134 <_ZN10ControllerC1EP11MotorDriverP11SoundDriverP11LightDriver>:

int counter = 0;

Controller::Controller(MotorDriver *motor, SoundDriver *sound, LightDriver *lys){
    
    this->motor = motor; 
 134:	fc 01       	movw	r30, r24
 136:	73 83       	std	Z+3, r23	; 0x03
 138:	62 83       	std	Z+2, r22	; 0x02
    this->sound = sound;
 13a:	55 83       	std	Z+5, r21	; 0x05
 13c:	44 83       	std	Z+4, r20	; 0x04
    this->lys = lys;
 13e:	37 83       	std	Z+7, r19	; 0x07
 140:	26 83       	std	Z+6, r18	; 0x06

    counterCheck = 1;
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	31 83       	std	Z+1, r19	; 0x01
 148:	20 83       	st	Z, r18
    
    initInterupts();
 14a:	ea cf       	rjmp	.-44     	; 0x120 <_ZN10Controller13initInteruptsEv>
 14c:	08 95       	ret

0000014e <_ZN10Controller8startCarEv>:
    EIMSK |= 0b00001100;
    sei();
}

void Controller::startCar()
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	ec 01       	movw	r28, r24
    sound->volume(30);
 154:	6e e1       	ldi	r22, 0x1E	; 30
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	47 d2       	rcall	.+1166   	; 0x5ea <_ZN11SoundDriver6volumeEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f e3       	ldi	r24, 0x3F	; 63
 15e:	9c e9       	ldi	r25, 0x9C	; 156
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <_ZN10Controller8startCarEv+0x12>
 164:	00 c0       	rjmp	.+0      	; 0x166 <_ZN10Controller8startCarEv+0x18>
 166:	00 00       	nop
 168:	9f ef       	ldi	r25, 0xFF	; 255
 16a:	23 e2       	ldi	r18, 0x23	; 35
 16c:	34 ef       	ldi	r19, 0xF4	; 244
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	91 50       	subi	r25, 0x01	; 1
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	30 40       	sbci	r19, 0x00	; 0
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	d9 f7       	brne	.-10     	; 0x170 <_ZN10Controller8startCarEv+0x22>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <_ZN10Controller8startCarEv+0x2e>
 17c:	00 00       	nop
    _delay_ms(10);
    //sound->play(1);

    _delay_ms(6000); // wait for song
    lys->setFrontLight(43);
 17e:	6b e2       	ldi	r22, 0x2B	; 43
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	8e 81       	ldd	r24, Y+6	; 0x06
 184:	9f 81       	ldd	r25, Y+7	; 0x07
 186:	69 d1       	rcall	.+722    	; 0x45a <_ZN11LightDriver13setFrontLightEi>
    lys->setBackLight(10);
 188:	6a e0       	ldi	r22, 0x0A	; 10
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	8e 81       	ldd	r24, Y+6	; 0x06
 18e:	9f 81       	ldd	r25, Y+7	; 0x07
 190:	6a d1       	rcall	.+724    	; 0x466 <_ZN11LightDriver12setBackLightEi>
    motor->forward(2);
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	9b 81       	ldd	r25, Y+3	; 0x03
 198:	bd d1       	rcall	.+890    	; 0x514 <_ZN11MotorDriver7forwardEh>
 19a:	9f ef       	ldi	r25, 0xFF	; 255
 19c:	25 ea       	ldi	r18, 0xA5	; 165
 19e:	3e e0       	ldi	r19, 0x0E	; 14
 1a0:	91 50       	subi	r25, 0x01	; 1
 1a2:	20 40       	sbci	r18, 0x00	; 0
 1a4:	30 40       	sbci	r19, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <_ZN10Controller8startCarEv+0x52>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <_ZN10Controller8startCarEv+0x5c>

    // Acceleration
    _delay_ms(300);
    motor->forward(3);
 1aa:	00 00       	nop
 1ac:	63 e0       	ldi	r22, 0x03	; 3
 1ae:	8a 81       	ldd	r24, Y+2	; 0x02
 1b0:	9b 81       	ldd	r25, Y+3	; 0x03
 1b2:	b0 d1       	rcall	.+864    	; 0x514 <_ZN11MotorDriver7forwardEh>
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	95 ea       	ldi	r25, 0xA5	; 165
 1b8:	2e e0       	ldi	r18, 0x0E	; 14
 1ba:	81 50       	subi	r24, 0x01	; 1
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	20 40       	sbci	r18, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <_ZN10Controller8startCarEv+0x6c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <_ZN10Controller8startCarEv+0x76>
    _delay_ms(300);
    motor->forward(4);
 1c4:	00 00       	nop
 1c6:	64 e0       	ldi	r22, 0x04	; 4
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	9b 81       	ldd	r25, Y+3	; 0x03
 1cc:	a3 d1       	rcall	.+838    	; 0x514 <_ZN11MotorDriver7forwardEh>
 1ce:	3f ef       	ldi	r19, 0xFF	; 255
 1d0:	85 ea       	ldi	r24, 0xA5	; 165
 1d2:	9e e0       	ldi	r25, 0x0E	; 14
 1d4:	31 50       	subi	r19, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <_ZN10Controller8startCarEv+0x86>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <_ZN10Controller8startCarEv+0x90>
    _delay_ms(300);
	motor->forward(5);
 1de:	00 00       	nop
 1e0:	65 e0       	ldi	r22, 0x05	; 5
 1e2:	8a 81       	ldd	r24, Y+2	; 0x02
 1e4:	9b 81       	ldd	r25, Y+3	; 0x03
 1e6:	96 d1       	rcall	.+812    	; 0x514 <_ZN11MotorDriver7forwardEh>
	
}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <_ZN10Controller16reactToInteruptsEv>:


void Controller::reactToInterupts()
{
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
    switch (counter) {
 1f2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1f6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1fa:	f9 01       	movw	r30, r18
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	eb 30       	cpi	r30, 0x0B	; 11
 200:	f1 05       	cpc	r31, r1
 202:	08 f0       	brcs	.+2      	; 0x206 <_ZN10Controller16reactToInteruptsEv+0x18>
 204:	bf c0       	rjmp	.+382    	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
 206:	ec 01       	movw	r28, r24
 208:	88 27       	eor	r24, r24
 20a:	ee 58       	subi	r30, 0x8E	; 142
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	8f 4f       	sbci	r24, 0xFF	; 255
 210:	79 c2       	rjmp	.+1266   	; 0x704 <__tablejump2__>
        case 1:
            if (counterCheck == counter) // only true once
 212:	88 81       	ld	r24, Y
 214:	99 81       	ldd	r25, Y+1	; 0x01
 216:	28 17       	cp	r18, r24
 218:	39 07       	cpc	r19, r25
 21a:	09 f0       	breq	.+2      	; 0x21e <_ZN10Controller16reactToInteruptsEv+0x30>
 21c:	b3 c0       	rjmp	.+358    	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
            {
                counterCheck++;
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	99 83       	std	Y+1, r25	; 0x01
 222:	88 83       	st	Y, r24
                sound->play(2); 
 224:	62 e0       	ldi	r22, 0x02	; 2
 226:	8c 81       	ldd	r24, Y+4	; 0x04
 228:	9d 81       	ldd	r25, Y+5	; 0x05
 22a:	d0 d1       	rcall	.+928    	; 0x5cc <_ZN11SoundDriver4playEh>
 22c:	ab c0       	rjmp	.+342    	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
			}
            break;
        case 2:
            if (counterCheck == counter)
 22e:	88 81       	ld	r24, Y
 230:	99 81       	ldd	r25, Y+1	; 0x01
 232:	28 17       	cp	r18, r24
 234:	39 07       	cpc	r19, r25
 236:	09 f0       	breq	.+2      	; 0x23a <_ZN10Controller16reactToInteruptsEv+0x4c>
 238:	a5 c0       	rjmp	.+330    	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
            {
                counterCheck++;
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	99 83       	std	Y+1, r25	; 0x01
 23e:	88 83       	st	Y, r24
                sound->play(2); 
 240:	62 e0       	ldi	r22, 0x02	; 2
 242:	8c 81       	ldd	r24, Y+4	; 0x04
 244:	9d 81       	ldd	r25, Y+5	; 0x05
 246:	c2 d1       	rcall	.+900    	; 0x5cc <_ZN11SoundDriver4playEh>
 248:	9d c0       	rjmp	.+314    	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
            }
            break;
            

        case 3:
            if (counterCheck == counter)
 24a:	88 81       	ld	r24, Y
 24c:	99 81       	ldd	r25, Y+1	; 0x01
 24e:	28 17       	cp	r18, r24
 250:	39 07       	cpc	r19, r25
 252:	09 f0       	breq	.+2      	; 0x256 <_ZN10Controller16reactToInteruptsEv+0x68>
 254:	97 c0       	rjmp	.+302    	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
            {
                counterCheck++;
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	99 83       	std	Y+1, r25	; 0x01
 25a:	88 83       	st	Y, r24
                sound->play(2); 
 25c:	62 e0       	ldi	r22, 0x02	; 2
 25e:	8c 81       	ldd	r24, Y+4	; 0x04
 260:	9d 81       	ldd	r25, Y+5	; 0x05
 262:	b4 d1       	rcall	.+872    	; 0x5cc <_ZN11SoundDriver4playEh>
				motor->forward(5);
 264:	65 e0       	ldi	r22, 0x05	; 5
 266:	8a 81       	ldd	r24, Y+2	; 0x02
 268:	9b 81       	ldd	r25, Y+3	; 0x03
 26a:	54 d1       	rcall	.+680    	; 0x514 <_ZN11MotorDriver7forwardEh>
 26c:	8b c0       	rjmp	.+278    	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
 26e:	88 81       	ld	r24, Y
            }
            break;
                
        
        case 4:
            if (counterCheck == counter)
 270:	99 81       	ldd	r25, Y+1	; 0x01
 272:	28 17       	cp	r18, r24
 274:	39 07       	cpc	r19, r25
 276:	09 f0       	breq	.+2      	; 0x27a <_ZN10Controller16reactToInteruptsEv+0x8c>
 278:	85 c0       	rjmp	.+266    	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
 27a:	01 96       	adiw	r24, 0x01	; 1
            {
                counterCheck++;
 27c:	99 83       	std	Y+1, r25	; 0x01
 27e:	88 83       	st	Y, r24
                sound->play(2); 
 280:	62 e0       	ldi	r22, 0x02	; 2
 282:	8c 81       	ldd	r24, Y+4	; 0x04
 284:	9d 81       	ldd	r25, Y+5	; 0x05
 286:	a2 d1       	rcall	.+836    	; 0x5cc <_ZN11SoundDriver4playEh>
				motor->forward(3);
 288:	63 e0       	ldi	r22, 0x03	; 3
 28a:	8a 81       	ldd	r24, Y+2	; 0x02
 28c:	9b 81       	ldd	r25, Y+3	; 0x03
 28e:	42 d1       	rcall	.+644    	; 0x514 <_ZN11MotorDriver7forwardEh>
 290:	79 c0       	rjmp	.+242    	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
 292:	88 81       	ld	r24, Y
            }
            break;

        case 5:
            if (counterCheck == counter)
 294:	99 81       	ldd	r25, Y+1	; 0x01
 296:	28 17       	cp	r18, r24
 298:	39 07       	cpc	r19, r25
 29a:	09 f0       	breq	.+2      	; 0x29e <_ZN10Controller16reactToInteruptsEv+0xb0>
 29c:	73 c0       	rjmp	.+230    	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
            {
               counterCheck++;
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	99 83       	std	Y+1, r25	; 0x01
 2a2:	88 83       	st	Y, r24
                sound->play(2); 
 2a4:	62 e0       	ldi	r22, 0x02	; 2
 2a6:	8c 81       	ldd	r24, Y+4	; 0x04
 2a8:	9d 81       	ldd	r25, Y+5	; 0x05
 2aa:	90 d1       	rcall	.+800    	; 0x5cc <_ZN11SoundDriver4playEh>
 2ac:	6b c0       	rjmp	.+214    	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
 2ae:	88 81       	ld	r24, Y
            }
            break;
        
        case 6:
            if (counterCheck == counter)
 2b0:	99 81       	ldd	r25, Y+1	; 0x01
 2b2:	28 17       	cp	r18, r24
 2b4:	39 07       	cpc	r19, r25
 2b6:	09 f0       	breq	.+2      	; 0x2ba <_ZN10Controller16reactToInteruptsEv+0xcc>
 2b8:	65 c0       	rjmp	.+202    	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
            {
                counterCheck++;
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	99 83       	std	Y+1, r25	; 0x01
                sound->play(2); 
 2be:	88 83       	st	Y, r24
 2c0:	62 e0       	ldi	r22, 0x02	; 2
 2c2:	8c 81       	ldd	r24, Y+4	; 0x04
 2c4:	9d 81       	ldd	r25, Y+5	; 0x05
                motor->backward(5);
 2c6:	82 d1       	rcall	.+772    	; 0x5cc <_ZN11SoundDriver4playEh>
 2c8:	65 e0       	ldi	r22, 0x05	; 5
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	9b 81       	ldd	r25, Y+3	; 0x03
 2ce:	3c d1       	rcall	.+632    	; 0x548 <_ZN11MotorDriver8backwardEh>
                lys->setBackLight(52);
 2d0:	64 e3       	ldi	r22, 0x34	; 52
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	8e 81       	ldd	r24, Y+6	; 0x06
 2d6:	9f 81       	ldd	r25, Y+7	; 0x07
 2d8:	c6 d0       	rcall	.+396    	; 0x466 <_ZN11LightDriver12setBackLightEi>
 2da:	54 c0       	rjmp	.+168    	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
 2dc:	88 81       	ld	r24, Y
            }
            break;

        case 7:
            if (counterCheck == counter)
 2de:	99 81       	ldd	r25, Y+1	; 0x01
 2e0:	28 17       	cp	r18, r24
 2e2:	39 07       	cpc	r19, r25
 2e4:	09 f0       	breq	.+2      	; 0x2e8 <_ZN10Controller16reactToInteruptsEv+0xfa>
 2e6:	4e c0       	rjmp	.+156    	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
 2e8:	01 96       	adiw	r24, 0x01	; 1
            {
                counterCheck++;
 2ea:	99 83       	std	Y+1, r25	; 0x01
 2ec:	88 83       	st	Y, r24
 2ee:	4a c0       	rjmp	.+148    	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
 2f0:	88 81       	ld	r24, Y
                
            }
			break;
			
		case 8:
			if (counterCheck == counter)
 2f2:	99 81       	ldd	r25, Y+1	; 0x01
 2f4:	28 17       	cp	r18, r24
 2f6:	39 07       	cpc	r19, r25
 2f8:	09 f0       	breq	.+2      	; 0x2fc <_ZN10Controller16reactToInteruptsEv+0x10e>
 2fa:	44 c0       	rjmp	.+136    	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
			{
				counterCheck++;
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	99 83       	std	Y+1, r25	; 0x01
 300:	88 83       	st	Y, r24
				sound->play(2);
 302:	62 e0       	ldi	r22, 0x02	; 2
 304:	8c 81       	ldd	r24, Y+4	; 0x04
 306:	9d 81       	ldd	r25, Y+5	; 0x05
 308:	61 d1       	rcall	.+706    	; 0x5cc <_ZN11SoundDriver4playEh>
				motor->forward(3);
 30a:	63 e0       	ldi	r22, 0x03	; 3
 30c:	8a 81       	ldd	r24, Y+2	; 0x02
 30e:	9b 81       	ldd	r25, Y+3	; 0x03
 310:	01 d1       	rcall	.+514    	; 0x514 <_ZN11MotorDriver7forwardEh>
 312:	6a e0       	ldi	r22, 0x0A	; 10
                lys->setBackLight(10);
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	8e 81       	ldd	r24, Y+6	; 0x06
 318:	9f 81       	ldd	r25, Y+7	; 0x07
 31a:	a5 d0       	rcall	.+330    	; 0x466 <_ZN11LightDriver12setBackLightEi>
 31c:	33 c0       	rjmp	.+102    	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
 31e:	88 81       	ld	r24, Y
			}
            break;
		case 9:
			if (counterCheck == counter)
 320:	99 81       	ldd	r25, Y+1	; 0x01
 322:	28 17       	cp	r18, r24
 324:	39 07       	cpc	r19, r25
 326:	71 f5       	brne	.+92     	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
 328:	01 96       	adiw	r24, 0x01	; 1
			{
				counterCheck++;
 32a:	99 83       	std	Y+1, r25	; 0x01
 32c:	88 83       	st	Y, r24
 32e:	65 e0       	ldi	r22, 0x05	; 5
				motor->forward(5);
 330:	8a 81       	ldd	r24, Y+2	; 0x02
 332:	9b 81       	ldd	r25, Y+3	; 0x03
 334:	ef d0       	rcall	.+478    	; 0x514 <_ZN11MotorDriver7forwardEh>
 336:	26 c0       	rjmp	.+76     	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
 338:	88 81       	ld	r24, Y
			}
			break;
			
		case 10:
			if (counterCheck == counter)
 33a:	99 81       	ldd	r25, Y+1	; 0x01
 33c:	28 17       	cp	r18, r24
 33e:	39 07       	cpc	r19, r25
 340:	09 f5       	brne	.+66     	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
 342:	01 96       	adiw	r24, 0x01	; 1
			{
				counterCheck++;
 344:	99 83       	std	Y+1, r25	; 0x01
 346:	88 83       	st	Y, r24
 348:	62 e0       	ldi	r22, 0x02	; 2
				sound->play(2);
 34a:	8c 81       	ldd	r24, Y+4	; 0x04
 34c:	9d 81       	ldd	r25, Y+5	; 0x05
 34e:	3e d1       	rcall	.+636    	; 0x5cc <_ZN11SoundDriver4playEh>
 350:	19 c0       	rjmp	.+50     	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
			}
			break;
		case 11:
			if (counterCheck == counter)
 352:	88 81       	ld	r24, Y
 354:	99 81       	ldd	r25, Y+1	; 0x01
 356:	28 17       	cp	r18, r24
 358:	39 07       	cpc	r19, r25
			{
				counterCheck++;
 35a:	a1 f4       	brne	.+40     	; 0x384 <_ZN10Controller16reactToInteruptsEv+0x196>
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	99 83       	std	Y+1, r25	; 0x01
				motor->stop();
 360:	88 83       	st	Y, r24
 362:	8a 81       	ldd	r24, Y+2	; 0x02
 364:	9b 81       	ldd	r25, Y+3	; 0x03
                sound->play(3);
 366:	03 d1       	rcall	.+518    	; 0x56e <_ZN11MotorDriver4stopEv>
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	8c 81       	ldd	r24, Y+4	; 0x04
 36c:	9d 81       	ldd	r25, Y+5	; 0x05
 36e:	2e d1       	rcall	.+604    	; 0x5cc <_ZN11SoundDriver4playEh>
                lys->setBackLight(0);
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	8e 81       	ldd	r24, Y+6	; 0x06
 376:	9f 81       	ldd	r25, Y+7	; 0x07
 378:	76 d0       	rcall	.+236    	; 0x466 <_ZN11LightDriver12setBackLightEi>
 37a:	60 e0       	ldi	r22, 0x00	; 0
                lys->setBackLight(0);
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	8e 81       	ldd	r24, Y+6	; 0x06
 380:	9f 81       	ldd	r25, Y+7	; 0x07
 382:	71 d0       	rcall	.+226    	; 0x466 <_ZN11LightDriver12setBackLightEi>
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
			break;
        default:
            break;
        // flere cases
    }
}
 388:	08 95       	ret

0000038a <__vector_3>:
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0

    ISR(INT2_vect)
    {
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	2f 93       	push	r18
 396:	8f 93       	push	r24
 398:	9f 93       	push	r25
        // disable interrupts
    EIMSK &= ~(1 << INT3);
 39a:	8d b3       	in	r24, 0x1d	; 29
 39c:	87 7f       	andi	r24, 0xF7	; 247
 39e:	8d bb       	out	0x1d, r24	; 29
    EIMSK &= ~(1 << INT2);
 3a0:	8d b3       	in	r24, 0x1d	; 29
 3a2:	8b 7f       	andi	r24, 0xFB	; 251
 3a4:	8d bb       	out	0x1d, r24	; 29

    counter++;
 3a6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 3aa:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 3b4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 3b8:	2f ef       	ldi	r18, 0xFF	; 255
 3ba:	89 e6       	ldi	r24, 0x69	; 105
 3bc:	98 e1       	ldi	r25, 0x18	; 24
 3be:	21 50       	subi	r18, 0x01	; 1
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <__vector_3+0x34>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <__vector_3+0x3e>
 3c8:	00 00       	nop
    _delay_ms(500);

    // reset interrupt flags and enable again
    EIFR |= (1 << INTF2);
 3ca:	8c b3       	in	r24, 0x1c	; 28
 3cc:	84 60       	ori	r24, 0x04	; 4
 3ce:	8c bb       	out	0x1c, r24	; 28
    EIFR |= (1 << INTF3);
 3d0:	8c b3       	in	r24, 0x1c	; 28
 3d2:	88 60       	ori	r24, 0x08	; 8
 3d4:	8c bb       	out	0x1c, r24	; 28
    EIMSK |= (1 << INT2);
 3d6:	8d b3       	in	r24, 0x1d	; 29
 3d8:	84 60       	ori	r24, 0x04	; 4
 3da:	8d bb       	out	0x1d, r24	; 29
    EIMSK |= (1 << INT3);
 3dc:	8d b3       	in	r24, 0x1d	; 29
 3de:	88 60       	ori	r24, 0x08	; 8
 3e0:	8d bb       	out	0x1d, r24	; 29
}
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	2f 91       	pop	r18
 3e8:	0f 90       	pop	r0
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	0f 90       	pop	r0
 3ee:	1f 90       	pop	r1
 3f0:	18 95       	reti

000003f2 <__vector_4>:

ISR(INT3_vect)
{
 3f2:	1f 92       	push	r1
 3f4:	0f 92       	push	r0
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	0f 92       	push	r0
 3fa:	11 24       	eor	r1, r1
 3fc:	2f 93       	push	r18
 3fe:	8f 93       	push	r24
 400:	9f 93       	push	r25
    // disable interrupts
    EIMSK &= ~(1 << INT3);
 402:	8d b3       	in	r24, 0x1d	; 29
 404:	87 7f       	andi	r24, 0xF7	; 247
 406:	8d bb       	out	0x1d, r24	; 29
    EIMSK &= ~(1 << INT2);
 408:	8d b3       	in	r24, 0x1d	; 29
 40a:	8b 7f       	andi	r24, 0xFB	; 251
 40c:	8d bb       	out	0x1d, r24	; 29

    counter++;
 40e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 412:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 41c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 420:	2f ef       	ldi	r18, 0xFF	; 255
 422:	89 e6       	ldi	r24, 0x69	; 105
 424:	98 e1       	ldi	r25, 0x18	; 24
 426:	21 50       	subi	r18, 0x01	; 1
 428:	80 40       	sbci	r24, 0x00	; 0
 42a:	90 40       	sbci	r25, 0x00	; 0
 42c:	e1 f7       	brne	.-8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 430:	00 00       	nop
    _delay_ms(500);

    // reset interrupt flags and enable again
    EIFR |= (1 << INTF3);
 432:	8c b3       	in	r24, 0x1c	; 28
 434:	88 60       	ori	r24, 0x08	; 8
 436:	8c bb       	out	0x1c, r24	; 28
    EIFR |= (1 << INTF2);
 438:	8c b3       	in	r24, 0x1c	; 28
 43a:	84 60       	ori	r24, 0x04	; 4
 43c:	8c bb       	out	0x1c, r24	; 28
    EIMSK |= (1 << INT3);
 43e:	8d b3       	in	r24, 0x1d	; 29
 440:	88 60       	ori	r24, 0x08	; 8
 442:	8d bb       	out	0x1d, r24	; 29
    EIMSK |= (1 << INT2);
 444:	8d b3       	in	r24, 0x1d	; 29
 446:	84 60       	ori	r24, 0x04	; 4
 448:	8d bb       	out	0x1d, r24	; 29
}
 44a:	9f 91       	pop	r25
 44c:	8f 91       	pop	r24
 44e:	2f 91       	pop	r18
 450:	0f 90       	pop	r0
 452:	0f be       	out	0x3f, r0	; 63
 454:	0f 90       	pop	r0
 456:	1f 90       	pop	r1
 458:	18 95       	reti

0000045a <_ZN11LightDriver13setFrontLightEi>:
}

// Takes % intensity returns pwm on portb ben 7
void LightDriver::setFrontLight(int intensitet){
	if (intensitet >= 0 || intensitet <= 100){
		frontLight = intensitet;
 45a:	fc 01       	movw	r30, r24
 45c:	60 83       	st	Z, r22
 45e:	71 83       	std	Z+1, r23	; 0x01
	}
	else{
		frontLight = 1;
	}
	OCR0A = (255 / 100) * frontLight;
 460:	66 0f       	add	r22, r22
 462:	67 bd       	out	0x27, r22	; 39
 464:	08 95       	ret

00000466 <_ZN11LightDriver12setBackLightEi>:

// Takes % intensity returns pwm on portb ben 5
void LightDriver::setBackLight(int intensitet){
	
	if (intensitet >= 0 || intensitet <= 100){
		backLight = intensitet;
 466:	fc 01       	movw	r30, r24
 468:	73 83       	std	Z+3, r23	; 0x03
 46a:	62 83       	std	Z+2, r22	; 0x02
	}
	else{
		backLight = 1;
	}
	
	OCR1A = (255 / 100) * backLight;
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 474:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 478:	08 95       	ret

0000047a <_ZN11LightDriverC1Ev>:
#include "avr/io.h"
#include "lightdriver.h"

// default constructor
LightDriver::LightDriver()
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	ec 01       	movw	r28, r24
{
	DDRB = 0xFF;
 480:	8f ef       	ldi	r24, 0xFF	; 255
 482:	84 b9       	out	0x04, r24	; 4
	setFrontLight(0);
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	ce 01       	movw	r24, r28
 48a:	e7 df       	rcall	.-50     	; 0x45a <_ZN11LightDriver13setFrontLightEi>
	setBackLight(0);
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	ce 01       	movw	r24, r28
 492:	e9 df       	rcall	.-46     	; 0x466 <_ZN11LightDriver12setBackLightEi>
	TCCR0A = 0b10000011;
 494:	83 e8       	ldi	r24, 0x83	; 131
 496:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011;
 498:	83 e0       	ldi	r24, 0x03	; 3
 49a:	85 bd       	out	0x25, r24	; 37
	
	TCCR1A = 0b10000001;
 49c:	91 e8       	ldi	r25, 0x81	; 129
 49e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000011;
 4a2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	
}
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <main>:
#include "motordriver.h"
#include "lightdriver.h"
#include "sounddriver.h"
#include "controller.h"

int main(){
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	cd b7       	in	r28, 0x3d	; 61
 4b2:	de b7       	in	r29, 0x3e	; 62
 4b4:	67 97       	sbiw	r28, 0x17	; 23
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	f8 94       	cli
 4ba:	de bf       	out	0x3e, r29	; 62
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	cd bf       	out	0x3d, r28	; 61
     
    MotorDriver motor;
 4c0:	ce 01       	movw	r24, r28
 4c2:	01 96       	adiw	r24, 0x01	; 1
 4c4:	19 d0       	rcall	.+50     	; 0x4f8 <_ZN11MotorDriverC1Ev>
    SoundDriver sound;
 4c6:	ce 01       	movw	r24, r28
 4c8:	02 96       	adiw	r24, 0x02	; 2
 4ca:	9d d0       	rcall	.+314    	; 0x606 <_ZN11SoundDriverC1Ev>
    LightDriver lys;
 4cc:	ce 01       	movw	r24, r28
 4ce:	0c 96       	adiw	r24, 0x0c	; 12
 4d0:	d4 df       	rcall	.-88     	; 0x47a <_ZN11LightDriverC1Ev>
    Controller controller(&motor, &sound, &lys);
 4d2:	9e 01       	movw	r18, r28
 4d4:	24 5f       	subi	r18, 0xF4	; 244
 4d6:	3f 4f       	sbci	r19, 0xFF	; 255
 4d8:	ae 01       	movw	r20, r28
 4da:	4e 5f       	subi	r20, 0xFE	; 254
 4dc:	5f 4f       	sbci	r21, 0xFF	; 255
 4de:	be 01       	movw	r22, r28
 4e0:	6f 5f       	subi	r22, 0xFF	; 255
 4e2:	7f 4f       	sbci	r23, 0xFF	; 255
 4e4:	ce 01       	movw	r24, r28
 4e6:	40 96       	adiw	r24, 0x10	; 16

    controller.startCar();
 4e8:	25 de       	rcall	.-950    	; 0x134 <_ZN10ControllerC1EP11MotorDriverP11SoundDriverP11LightDriver>
 4ea:	ce 01       	movw	r24, r28
 4ec:	40 96       	adiw	r24, 0x10	; 16

    while (true) {
        controller.reactToInterupts();
 4ee:	2f de       	rcall	.-930    	; 0x14e <_ZN10Controller8startCarEv>
 4f0:	ce 01       	movw	r24, r28
 4f2:	40 96       	adiw	r24, 0x10	; 16
 4f4:	7c de       	rcall	.-776    	; 0x1ee <_ZN10Controller16reactToInteruptsEv>
 4f6:	fc cf       	rjmp	.-8      	; 0x4f0 <main+0x44>

000004f8 <_ZN11MotorDriverC1Ev>:
#include "motorDriver.h"
#include <avr/io.h> 

MotorDriver::MotorDriver(){
    // PE output and set to 0
    DDRE = 0xFF;
 4f8:	8f ef       	ldi	r24, 0xFF	; 255
 4fa:	8d b9       	out	0x0d, r24	; 13
    PORTE = 0;
 4fc:	1e b8       	out	0x0e, r1	; 14
    // Mode = 3 (PWM, Phase Correct, 10 bit)
    // Set OC3A on match down counting / Clear OC3A on match up counting - PE 3
    // Clock prescaler = 1
    TCCR3A = 0b10000011;
 4fe:	83 e8       	ldi	r24, 0x83	; 131
 500:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    TCCR3B = 0b00000011;
 504:	83 e0       	ldi	r24, 0x03	; 3
 506:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
    // Duty cycle = 0%
    OCR3A = 0;
 50a:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 50e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 512:	08 95       	ret

00000514 <_ZN11MotorDriver7forwardEh>:
}

void MotorDriver::forward(unsigned char speed){
    unsigned char s = speed;
    if (s != 1 && s != 2 && s !=3 && s !=4 && s !=5 && s !=6){
 514:	8f ef       	ldi	r24, 0xFF	; 255
 516:	86 0f       	add	r24, r22
 518:	86 30       	cpi	r24, 0x06	; 6
 51a:	38 f0       	brcs	.+14     	; 0x52a <_ZN11MotorDriver7forwardEh+0x16>
        //default værdi
        OCR3A = 300;
 51c:	8c e2       	ldi	r24, 0x2C	; 44
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 524:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
        return;
 528:	08 95       	ret
    }
    // PB ben 1 styrer retning på motor
    PORTB |= 0b00000001;
 52a:	85 b1       	in	r24, 0x05	; 5
 52c:	81 60       	ori	r24, 0x01	; 1
 52e:	85 b9       	out	0x05, r24	; 5

    // Duty cycle sættes
    OCR3A = s/6*1024;
 530:	8b ea       	ldi	r24, 0xAB	; 171
 532:	68 9f       	mul	r22, r24
 534:	61 2d       	mov	r22, r1
 536:	11 24       	eor	r1, r1
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	96 2f       	mov	r25, r22
 53c:	9c 7f       	andi	r25, 0xFC	; 252
 53e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 542:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 546:	08 95       	ret

00000548 <_ZN11MotorDriver8backwardEh>:

void MotorDriver::backward(unsigned char speed){

    unsigned char s = speed;

    if (s != 1 && s != 2 && s !=3 && s !=4 && s !=5 && s !=6){
 548:	8f ef       	ldi	r24, 0xFF	; 255
 54a:	86 0f       	add	r24, r22
 54c:	86 30       	cpi	r24, 0x06	; 6
 54e:	70 f4       	brcc	.+28     	; 0x56c <_ZN11MotorDriver8backwardEh+0x24>
        return;
    }

    // PB ben 1 styrer retning på motor
    PORTB &= 11111110;
 550:	85 b1       	in	r24, 0x05	; 5
 552:	86 7c       	andi	r24, 0xC6	; 198
 554:	85 b9       	out	0x05, r24	; 5

    // Duty cycle sættes
    OCR3A = s/6*1024;
 556:	8b ea       	ldi	r24, 0xAB	; 171
 558:	68 9f       	mul	r22, r24
 55a:	61 2d       	mov	r22, r1
 55c:	11 24       	eor	r1, r1
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	96 2f       	mov	r25, r22
 562:	9c 7f       	andi	r25, 0xFC	; 252
 564:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 568:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 56c:	08 95       	ret

0000056e <_ZN11MotorDriver4stopEv>:

}

void MotorDriver::stop(){

    OCR3A = 0;
 56e:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 572:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 576:	08 95       	ret

00000578 <_ZN11SoundDriver8checksumEv>:
	CMD = 0x16;
	PARA1 = 0x00;
	PARA2 = 0x00;
	checksum();
	send();
}
 578:	fc 01       	movw	r30, r24
 57a:	83 81       	ldd	r24, Z+3	; 0x03
 57c:	21 81       	ldd	r18, Z+1	; 0x01
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	28 0f       	add	r18, r24
 582:	31 1d       	adc	r19, r1
 584:	84 81       	ldd	r24, Z+4	; 0x04
 586:	28 0f       	add	r18, r24
 588:	31 1d       	adc	r19, r1
 58a:	85 81       	ldd	r24, Z+5	; 0x05
 58c:	28 0f       	add	r18, r24
 58e:	31 1d       	adc	r19, r1
 590:	31 95       	neg	r19
 592:	21 95       	neg	r18
 594:	31 09       	sbc	r19, r1
 596:	31 87       	std	Z+9, r19	; 0x09
 598:	20 87       	std	Z+8, r18	; 0x08
 59a:	36 83       	std	Z+6, r19	; 0x06
 59c:	27 83       	std	Z+7, r18	; 0x07
 59e:	08 95       	ret

000005a0 <_ZN11SoundDriver4sendEv>:
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	ec 01       	movw	r28, r24
 5a6:	88 81       	ld	r24, Y
 5a8:	84 d0       	rcall	.+264    	; 0x6b2 <SendChar>
 5aa:	8b 81       	ldd	r24, Y+3	; 0x03
 5ac:	82 d0       	rcall	.+260    	; 0x6b2 <SendChar>
 5ae:	89 81       	ldd	r24, Y+1	; 0x01
 5b0:	80 d0       	rcall	.+256    	; 0x6b2 <SendChar>
 5b2:	8c 81       	ldd	r24, Y+4	; 0x04
 5b4:	7e d0       	rcall	.+252    	; 0x6b2 <SendChar>
 5b6:	8d 81       	ldd	r24, Y+5	; 0x05
 5b8:	7c d0       	rcall	.+248    	; 0x6b2 <SendChar>
 5ba:	8e 81       	ldd	r24, Y+6	; 0x06
 5bc:	7a d0       	rcall	.+244    	; 0x6b2 <SendChar>
 5be:	8f 81       	ldd	r24, Y+7	; 0x07
 5c0:	78 d0       	rcall	.+240    	; 0x6b2 <SendChar>
 5c2:	8a 81       	ldd	r24, Y+2	; 0x02
 5c4:	76 d0       	rcall	.+236    	; 0x6b2 <SendChar>
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	08 95       	ret

000005cc <_ZN11SoundDriver4playEh>:
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	ec 01       	movw	r28, r24
 5d2:	8f e0       	ldi	r24, 0x0F	; 15
 5d4:	8b 83       	std	Y+3, r24	; 0x03
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	8c 83       	std	Y+4, r24	; 0x04
 5da:	6d 83       	std	Y+5, r22	; 0x05
 5dc:	ce 01       	movw	r24, r28
 5de:	cc df       	rcall	.-104    	; 0x578 <_ZN11SoundDriver8checksumEv>
 5e0:	ce 01       	movw	r24, r28
 5e2:	de df       	rcall	.-68     	; 0x5a0 <_ZN11SoundDriver4sendEv>
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	08 95       	ret

000005ea <_ZN11SoundDriver6volumeEh>:
void SoundDriver::volume(unsigned char param) {
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	ec 01       	movw	r28, r24
	CMD = 0x06;
 5f0:	86 e0       	ldi	r24, 0x06	; 6
 5f2:	8b 83       	std	Y+3, r24	; 0x03
	PARA1 = 0x00;
 5f4:	1c 82       	std	Y+4, r1	; 0x04
	PARA2 = param;
 5f6:	6d 83       	std	Y+5, r22	; 0x05
	checksum();
 5f8:	ce 01       	movw	r24, r28
 5fa:	be df       	rcall	.-132    	; 0x578 <_ZN11SoundDriver8checksumEv>
	send();
 5fc:	ce 01       	movw	r24, r28
 5fe:	d0 df       	rcall	.-96     	; 0x5a0 <_ZN11SoundDriver4sendEv>
}
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	08 95       	ret

00000606 <_ZN11SoundDriverC1Ev>:
	SendChar(PARA2);
	SendChar(CHECKSUM1);
	SendChar(CHECKSUM2);
	SendChar(END);
}
SoundDriver::SoundDriver() {
 606:	fc 01       	movw	r30, r24
	START = 0x7E;
 608:	8e e7       	ldi	r24, 0x7E	; 126
 60a:	80 83       	st	Z, r24
	FEEDBACK = 0;
 60c:	11 82       	std	Z+1, r1	; 0x01
	END = 0xEF;
 60e:	8f ee       	ldi	r24, 0xEF	; 239
 610:	82 83       	std	Z+2, r24	; 0x02
	InitUART(BAUD, 8, 1);
 612:	21 e0       	ldi	r18, 0x01	; 1
 614:	48 e0       	ldi	r20, 0x08	; 8
 616:	60 e8       	ldi	r22, 0x80	; 128
 618:	75 e2       	ldi	r23, 0x25	; 37
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	01 c0       	rjmp	.+2      	; 0x622 <InitUART>
 620:	08 95       	ret

00000622 <InitUART>:
{
	while(CharReady() == 0){
		
	}
	return UDR0;
}
 622:	0f 93       	push	r16
 624:	1f 93       	push	r17
 626:	cf 93       	push	r28
 628:	c4 2f       	mov	r28, r20
 62a:	42 2f       	mov	r20, r18
 62c:	8b 01       	movw	r16, r22
 62e:	9c 01       	movw	r18, r24
 630:	0c 52       	subi	r16, 0x2C	; 44
 632:	11 40       	sbci	r17, 0x01	; 1
 634:	21 09       	sbc	r18, r1
 636:	31 09       	sbc	r19, r1
 638:	05 3d       	cpi	r16, 0xD5	; 213
 63a:	10 4c       	sbci	r17, 0xC0	; 192
 63c:	21 40       	sbci	r18, 0x01	; 1
 63e:	31 05       	cpc	r19, r1
 640:	20 f4       	brcc	.+8      	; 0x64a <InitUART+0x28>
 642:	c5 30       	cpi	r28, 0x05	; 5
 644:	10 f0       	brcs	.+4      	; 0x64a <InitUART+0x28>
 646:	c9 30       	cpi	r28, 0x09	; 9
 648:	18 f0       	brcs	.+6      	; 0x650 <InitUART+0x2e>
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	62 d0       	rcall	.+196    	; 0x714 <_exit>
 650:	28 e1       	ldi	r18, 0x18	; 24
 652:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 656:	44 23       	and	r20, r20
 658:	29 f0       	breq	.+10     	; 0x664 <InitUART+0x42>
 65a:	e1 ec       	ldi	r30, 0xC1	; 193
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	20 81       	ld	r18, Z
 660:	20 68       	ori	r18, 0x80	; 128
 662:	20 83       	st	Z, r18
 664:	dc 01       	movw	r26, r24
 666:	cb 01       	movw	r24, r22
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	aa 1f       	adc	r26, r26
 66e:	bb 1f       	adc	r27, r27
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	aa 1f       	adc	r26, r26
 676:	bb 1f       	adc	r27, r27
 678:	9c 01       	movw	r18, r24
 67a:	ad 01       	movw	r20, r26
 67c:	22 0f       	add	r18, r18
 67e:	33 1f       	adc	r19, r19
 680:	44 1f       	adc	r20, r20
 682:	55 1f       	adc	r21, r21
 684:	22 0f       	add	r18, r18
 686:	33 1f       	adc	r19, r19
 688:	44 1f       	adc	r20, r20
 68a:	55 1f       	adc	r21, r21
 68c:	60 e0       	ldi	r22, 0x00	; 0
 68e:	74 e2       	ldi	r23, 0x24	; 36
 690:	84 ef       	ldi	r24, 0xF4	; 244
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	15 d0       	rcall	.+42     	; 0x6c0 <__udivmodsi4>
 696:	21 50       	subi	r18, 0x01	; 1
 698:	31 09       	sbc	r19, r1
 69a:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 69e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 6a2:	c5 50       	subi	r28, 0x05	; 5
 6a4:	cc 0f       	add	r28, r28
 6a6:	c0 93 c2 00 	sts	0x00C2, r28	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 6aa:	cf 91       	pop	r28
 6ac:	1f 91       	pop	r17
 6ae:	0f 91       	pop	r16
 6b0:	08 95       	ret

000006b2 <SendChar>:
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
	while((UCSR0A & 0b00100000) == 0){
 6b2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 6b6:	95 ff       	sbrs	r25, 5
 6b8:	fc cf       	rjmp	.-8      	; 0x6b2 <SendChar>
		
	}
	UDR0 = Tegn;
 6ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 6be:	08 95       	ret

000006c0 <__udivmodsi4>:
 6c0:	a1 e2       	ldi	r26, 0x21	; 33
 6c2:	1a 2e       	mov	r1, r26
 6c4:	aa 1b       	sub	r26, r26
 6c6:	bb 1b       	sub	r27, r27
 6c8:	fd 01       	movw	r30, r26
 6ca:	0d c0       	rjmp	.+26     	; 0x6e6 <__udivmodsi4_ep>

000006cc <__udivmodsi4_loop>:
 6cc:	aa 1f       	adc	r26, r26
 6ce:	bb 1f       	adc	r27, r27
 6d0:	ee 1f       	adc	r30, r30
 6d2:	ff 1f       	adc	r31, r31
 6d4:	a2 17       	cp	r26, r18
 6d6:	b3 07       	cpc	r27, r19
 6d8:	e4 07       	cpc	r30, r20
 6da:	f5 07       	cpc	r31, r21
 6dc:	20 f0       	brcs	.+8      	; 0x6e6 <__udivmodsi4_ep>
 6de:	a2 1b       	sub	r26, r18
 6e0:	b3 0b       	sbc	r27, r19
 6e2:	e4 0b       	sbc	r30, r20
 6e4:	f5 0b       	sbc	r31, r21

000006e6 <__udivmodsi4_ep>:
 6e6:	66 1f       	adc	r22, r22
 6e8:	77 1f       	adc	r23, r23
 6ea:	88 1f       	adc	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	1a 94       	dec	r1
 6f0:	69 f7       	brne	.-38     	; 0x6cc <__udivmodsi4_loop>
 6f2:	60 95       	com	r22
 6f4:	70 95       	com	r23
 6f6:	80 95       	com	r24
 6f8:	90 95       	com	r25
 6fa:	9b 01       	movw	r18, r22
 6fc:	ac 01       	movw	r20, r24
 6fe:	bd 01       	movw	r22, r26
 700:	cf 01       	movw	r24, r30
 702:	08 95       	ret

00000704 <__tablejump2__>:
 704:	ee 0f       	add	r30, r30
 706:	ff 1f       	adc	r31, r31
 708:	88 1f       	adc	r24, r24
 70a:	8b bf       	out	0x3b, r24	; 59
 70c:	07 90       	elpm	r0, Z+
 70e:	f6 91       	elpm	r31, Z
 710:	e0 2d       	mov	r30, r0
 712:	19 94       	eijmp

00000714 <_exit>:
 714:	f8 94       	cli

00000716 <__stop_program>:
 716:	ff cf       	rjmp	.-2      	; 0x716 <__stop_program>
