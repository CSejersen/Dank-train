
Dank-Train.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000432  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a3d  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001205  00000000  00000000  00001ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007c8  00000000  00000000  000031fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000021c  00000000  00000000  000039c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008af  00000000  00000000  00003be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c7  00000000  00000000  00004493  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004a5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	2b d0       	rcall	.+86     	; 0x14c <main>
  f6:	71 c1       	rjmp	.+738    	; 0x3da <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_ZN3Lys13setFrontItensEi>:


//portb ben 7
void Lys::setFrontItens(int intensitet){
	if (intensitet >= 0 || intensitet <= 100){
		frontLys = intensitet;
  fa:	fc 01       	movw	r30, r24
  fc:	60 83       	st	Z, r22
  fe:	71 83       	std	Z+1, r23	; 0x01
	}
	else{
		frontLys = 1;
	}
	OCR0A = (255 / 100) * frontLys;
 100:	66 0f       	add	r22, r22
 102:	67 bd       	out	0x27, r22	; 39
 104:	08 95       	ret

00000106 <_ZN3Lys11setBakItensEi>:


//portb ben 5
void Lys::setBakItens(int intensitet){
	if (intensitet >= 0 || intensitet <= 100){
		bakLys = intensitet;
 106:	fc 01       	movw	r30, r24
 108:	73 83       	std	Z+3, r23	; 0x03
 10a:	62 83       	std	Z+2, r22	; 0x02
	}
	else{
		bakLys = 1;
	}
	OCR1A = (255 / 100) * bakLys;
 10c:	66 0f       	add	r22, r22
 10e:	77 1f       	adc	r23, r23
 110:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 114:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 118:	08 95       	ret

0000011a <_ZN3LysC1Ev>:
#include "avr/io.h"
#include "Lys.h"


// default constructor
Lys::Lys()
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	ec 01       	movw	r28, r24
{
	DDRB = 0xFF;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	84 b9       	out	0x04, r24	; 4
	setFrontItens(0);
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	ce 01       	movw	r24, r28
 12a:	e7 df       	rcall	.-50     	; 0xfa <_ZN3Lys13setFrontItensEi>
	setBakItens(0);
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	ce 01       	movw	r24, r28
 132:	e9 df       	rcall	.-46     	; 0x106 <_ZN3Lys11setBakItensEi>
	TCCR0A = 0b10000011;
 134:	83 e8       	ldi	r24, 0x83	; 131
 136:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011;
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	85 bd       	out	0x25, r24	; 37
	
	TCCR1A = 0b10000001;
 13c:	91 e8       	ldi	r25, 0x81	; 129
 13e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000011;
 142:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	
} //Lys
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <main>:
#include <util/delay.h>


  
  
int main(){
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	2f 97       	sbiw	r28, 0x0f	; 15
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
	
     Motor motor;
 160:	ce 01       	movw	r24, r28
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	27 d0       	rcall	.+78     	; 0x1b4 <_ZN5MotorC1Ev>
     Lys light;
 166:	ce 01       	movw	r24, r28
 168:	02 96       	adiw	r24, 0x02	; 2
 16a:	d7 df       	rcall	.-82     	; 0x11a <_ZN3LysC1Ev>
     Sound sound;
 16c:	ce 01       	movw	r24, r28
 16e:	06 96       	adiw	r24, 0x06	; 6
 170:	b5 d0       	rcall	.+362    	; 0x2dc <_ZN5SoundC1Ev>

     motor.forward(4);
 172:	64 e0       	ldi	r22, 0x04	; 4
 174:	ce 01       	movw	r24, r28
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	2b d0       	rcall	.+86     	; 0x1d0 <_ZN5Motor7forwardEh>
     sound.volume(10);
 17a:	6a e0       	ldi	r22, 0x0A	; 10
 17c:	ce 01       	movw	r24, r28
 17e:	06 96       	adiw	r24, 0x06	; 6
 180:	9f d0       	rcall	.+318    	; 0x2c0 <_ZN5Sound6volumeEh>
     sound.play(1);
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	ce 01       	movw	r24, r28
 186:	06 96       	adiw	r24, 0x06	; 6
 188:	8c d0       	rcall	.+280    	; 0x2a2 <_ZN5Sound4playEh>
	 light.setFrontItens(100);
 18a:	64 e6       	ldi	r22, 0x64	; 100
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	ce 01       	movw	r24, r28
 190:	02 96       	adiw	r24, 0x02	; 2
 192:	b3 df       	rcall	.-154    	; 0xfa <_ZN3Lys13setFrontItensEi>
	 light.setBakItens(100);
 194:	64 e6       	ldi	r22, 0x64	; 100
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	ce 01       	movw	r24, r28
 19a:	02 96       	adiw	r24, 0x02	; 2
 19c:	b4 df       	rcall	.-152    	; 0x106 <_ZN3Lys11setBakItensEi>
 19e:	80 e0       	ldi	r24, 0x00	; 0

    return 0;
}
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	2f 96       	adiw	r28, 0x0f	; 15
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	cd bf       	out	0x3d, r28	; 61
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <_ZN5MotorC1Ev>:
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
#include "motorstyring.h"
#include <avr/io.h> 

 // PB outputs and set to 0
Motor::Motor(){
	  DDRE = 0xFF;
 1b6:	8d b9       	out	0x0d, r24	; 13
	  PORTE = 0;
 1b8:	1e b8       	out	0x0e, r1	; 14
	  // Mode = 3 (PWM, Phase Correct, 10 bit)
	  // Set OC3A on match down counting / Clear OC3A on match up counting - PE 3
	  // Clock prescaler = 1
	  TCCR3A = 0b10000011;
 1ba:	83 e8       	ldi	r24, 0x83	; 131
 1bc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
	  TCCR3B = 0b00000011;
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
	  // Duty cycle = 0%
	  OCR3B = 0;
 1c6:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
 1ca:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
 1ce:	08 95       	ret

000001d0 <_ZN5Motor7forwardEh>:
}

void Motor::forward(unsigned char speed){
    unsigned char s = speed;
    if (s != 1 && s != 2 && s !=3 && s !=4 && s !=5 && s !=6){
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	86 0f       	add	r24, r22
 1d4:	86 30       	cpi	r24, 0x06	; 6
 1d6:	d0 f5       	brcc	.+116    	; 0x24c <_ZN5Motor7forwardEh+0x7c>
        return;
    }
    PORTB |= 0b00000001;
 1d8:	85 b1       	in	r24, 0x05	; 5
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	85 b9       	out	0x05, r24	; 5

    switch (s) {
 1de:	63 30       	cpi	r22, 0x03	; 3
 1e0:	d1 f0       	breq	.+52     	; 0x216 <_ZN5Motor7forwardEh+0x46>
 1e2:	28 f4       	brcc	.+10     	; 0x1ee <_ZN5Motor7forwardEh+0x1e>
 1e4:	61 30       	cpi	r22, 0x01	; 1
 1e6:	49 f0       	breq	.+18     	; 0x1fa <_ZN5Motor7forwardEh+0x2a>
 1e8:	62 30       	cpi	r22, 0x02	; 2
 1ea:	71 f0       	breq	.+28     	; 0x208 <_ZN5Motor7forwardEh+0x38>
 1ec:	08 95       	ret
 1ee:	65 30       	cpi	r22, 0x05	; 5
 1f0:	01 f1       	breq	.+64     	; 0x232 <_ZN5Motor7forwardEh+0x62>
 1f2:	c0 f0       	brcs	.+48     	; 0x224 <_ZN5Motor7forwardEh+0x54>
 1f4:	66 30       	cpi	r22, 0x06	; 6
 1f6:	21 f1       	breq	.+72     	; 0x240 <_ZN5Motor7forwardEh+0x70>
 1f8:	08 95       	ret
        case 1:
        OCR3A = 50;
 1fa:	82 e3       	ldi	r24, 0x32	; 50
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 202:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
        return;
 206:	08 95       	ret
        
        case 2:
        OCR3A = 100;
 208:	84 e6       	ldi	r24, 0x64	; 100
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 210:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
        return;
 214:	08 95       	ret

        case 3:
        OCR3A = 200;
 216:	88 ec       	ldi	r24, 0xC8	; 200
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 21e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
        return;
 222:	08 95       	ret

        case 4:
        OCR3A = 400;
 224:	80 e9       	ldi	r24, 0x90	; 144
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 22c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
        return;
 230:	08 95       	ret

        case 5:
        OCR3A = 800;
 232:	80 e2       	ldi	r24, 0x20	; 32
 234:	93 e0       	ldi	r25, 0x03	; 3
 236:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 23a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
        return;
 23e:	08 95       	ret

        case 6:
        OCR3A = 1020;
 240:	8c ef       	ldi	r24, 0xFC	; 252
 242:	93 e0       	ldi	r25, 0x03	; 3
 244:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 248:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 24c:	08 95       	ret

0000024e <_ZN5Sound8checksumEv>:
	CMD = 0x16;
	PARA1 = 0x00;
	PARA2 = 0x00;
	checksum();
	send();
}
 24e:	fc 01       	movw	r30, r24
 250:	83 81       	ldd	r24, Z+3	; 0x03
 252:	21 81       	ldd	r18, Z+1	; 0x01
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	28 0f       	add	r18, r24
 258:	31 1d       	adc	r19, r1
 25a:	84 81       	ldd	r24, Z+4	; 0x04
 25c:	28 0f       	add	r18, r24
 25e:	31 1d       	adc	r19, r1
 260:	85 81       	ldd	r24, Z+5	; 0x05
 262:	28 0f       	add	r18, r24
 264:	31 1d       	adc	r19, r1
 266:	31 95       	neg	r19
 268:	21 95       	neg	r18
 26a:	31 09       	sbc	r19, r1
 26c:	31 87       	std	Z+9, r19	; 0x09
 26e:	20 87       	std	Z+8, r18	; 0x08
 270:	36 83       	std	Z+6, r19	; 0x06
 272:	27 83       	std	Z+7, r18	; 0x07
 274:	08 95       	ret

00000276 <_ZN5Sound4sendEv>:
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	ec 01       	movw	r28, r24
 27c:	88 81       	ld	r24, Y
 27e:	84 d0       	rcall	.+264    	; 0x388 <SendChar>
 280:	8b 81       	ldd	r24, Y+3	; 0x03
 282:	82 d0       	rcall	.+260    	; 0x388 <SendChar>
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	80 d0       	rcall	.+256    	; 0x388 <SendChar>
 288:	8c 81       	ldd	r24, Y+4	; 0x04
 28a:	7e d0       	rcall	.+252    	; 0x388 <SendChar>
 28c:	8d 81       	ldd	r24, Y+5	; 0x05
 28e:	7c d0       	rcall	.+248    	; 0x388 <SendChar>
 290:	8e 81       	ldd	r24, Y+6	; 0x06
 292:	7a d0       	rcall	.+244    	; 0x388 <SendChar>
 294:	8f 81       	ldd	r24, Y+7	; 0x07
 296:	78 d0       	rcall	.+240    	; 0x388 <SendChar>
 298:	8a 81       	ldd	r24, Y+2	; 0x02
 29a:	76 d0       	rcall	.+236    	; 0x388 <SendChar>
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <_ZN5Sound4playEh>:
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	ec 01       	movw	r28, r24
 2a8:	8f e0       	ldi	r24, 0x0F	; 15
 2aa:	8b 83       	std	Y+3, r24	; 0x03
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	8c 83       	std	Y+4, r24	; 0x04
 2b0:	6d 83       	std	Y+5, r22	; 0x05
 2b2:	ce 01       	movw	r24, r28
 2b4:	cc df       	rcall	.-104    	; 0x24e <_ZN5Sound8checksumEv>
 2b6:	ce 01       	movw	r24, r28
 2b8:	de df       	rcall	.-68     	; 0x276 <_ZN5Sound4sendEv>
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <_ZN5Sound6volumeEh>:
void Sound::volume(unsigned char param) {
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	ec 01       	movw	r28, r24
	CMD = 0x06;
 2c6:	86 e0       	ldi	r24, 0x06	; 6
 2c8:	8b 83       	std	Y+3, r24	; 0x03
	PARA1 = 0x00;
 2ca:	1c 82       	std	Y+4, r1	; 0x04
	PARA2 = param;
 2cc:	6d 83       	std	Y+5, r22	; 0x05
	checksum();
 2ce:	ce 01       	movw	r24, r28
 2d0:	be df       	rcall	.-132    	; 0x24e <_ZN5Sound8checksumEv>
	send();
 2d2:	ce 01       	movw	r24, r28
 2d4:	d0 df       	rcall	.-96     	; 0x276 <_ZN5Sound4sendEv>
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <_ZN5SoundC1Ev>:
	SendChar(PARA2);
	SendChar(CHECKSUM1);
	SendChar(CHECKSUM2);
	SendChar(END);
}
Sound::Sound() {
 2dc:	fc 01       	movw	r30, r24
	START = 0x7E;
 2de:	8e e7       	ldi	r24, 0x7E	; 126
 2e0:	80 83       	st	Z, r24
	FEEDBACK = 0;
 2e2:	11 82       	std	Z+1, r1	; 0x01
	END = 0xEF;
 2e4:	8f ee       	ldi	r24, 0xEF	; 239
 2e6:	82 83       	std	Z+2, r24	; 0x02
	InitUART(BAUD, 8, 1);
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	48 e0       	ldi	r20, 0x08	; 8
 2ec:	60 e8       	ldi	r22, 0x80	; 128
 2ee:	75 e2       	ldi	r23, 0x25	; 37
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <InitUART>
 2f6:	08 95       	ret

000002f8 <InitUART>:
{
	while(CharReady() == 0){
		
	}
	return UDR0;
}
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	c4 2f       	mov	r28, r20
 300:	42 2f       	mov	r20, r18
 302:	8b 01       	movw	r16, r22
 304:	9c 01       	movw	r18, r24
 306:	0c 52       	subi	r16, 0x2C	; 44
 308:	11 40       	sbci	r17, 0x01	; 1
 30a:	21 09       	sbc	r18, r1
 30c:	31 09       	sbc	r19, r1
 30e:	05 3d       	cpi	r16, 0xD5	; 213
 310:	10 4c       	sbci	r17, 0xC0	; 192
 312:	21 40       	sbci	r18, 0x01	; 1
 314:	31 05       	cpc	r19, r1
 316:	20 f4       	brcc	.+8      	; 0x320 <InitUART+0x28>
 318:	c5 30       	cpi	r28, 0x05	; 5
 31a:	10 f0       	brcs	.+4      	; 0x320 <InitUART+0x28>
 31c:	c9 30       	cpi	r28, 0x09	; 9
 31e:	18 f0       	brcs	.+6      	; 0x326 <InitUART+0x2e>
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	5a d0       	rcall	.+180    	; 0x3da <_exit>
 326:	28 e1       	ldi	r18, 0x18	; 24
 328:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 32c:	44 23       	and	r20, r20
 32e:	29 f0       	breq	.+10     	; 0x33a <InitUART+0x42>
 330:	e1 ec       	ldi	r30, 0xC1	; 193
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	20 81       	ld	r18, Z
 336:	20 68       	ori	r18, 0x80	; 128
 338:	20 83       	st	Z, r18
 33a:	dc 01       	movw	r26, r24
 33c:	cb 01       	movw	r24, r22
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	aa 1f       	adc	r26, r26
 344:	bb 1f       	adc	r27, r27
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	aa 1f       	adc	r26, r26
 34c:	bb 1f       	adc	r27, r27
 34e:	9c 01       	movw	r18, r24
 350:	ad 01       	movw	r20, r26
 352:	22 0f       	add	r18, r18
 354:	33 1f       	adc	r19, r19
 356:	44 1f       	adc	r20, r20
 358:	55 1f       	adc	r21, r21
 35a:	22 0f       	add	r18, r18
 35c:	33 1f       	adc	r19, r19
 35e:	44 1f       	adc	r20, r20
 360:	55 1f       	adc	r21, r21
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	74 e2       	ldi	r23, 0x24	; 36
 366:	84 ef       	ldi	r24, 0xF4	; 244
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	15 d0       	rcall	.+42     	; 0x396 <__udivmodsi4>
 36c:	21 50       	subi	r18, 0x01	; 1
 36e:	31 09       	sbc	r19, r1
 370:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 374:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 378:	c5 50       	subi	r28, 0x05	; 5
 37a:	cc 0f       	add	r28, r28
 37c:	c0 93 c2 00 	sts	0x00C2, r28	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	08 95       	ret

00000388 <SendChar>:
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
	while((UCSR0A & 0b00100000) == 0){
 388:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 38c:	95 ff       	sbrs	r25, 5
 38e:	fc cf       	rjmp	.-8      	; 0x388 <SendChar>
		
	}
	UDR0 = Tegn;
 390:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 394:	08 95       	ret

00000396 <__udivmodsi4>:
 396:	a1 e2       	ldi	r26, 0x21	; 33
 398:	1a 2e       	mov	r1, r26
 39a:	aa 1b       	sub	r26, r26
 39c:	bb 1b       	sub	r27, r27
 39e:	fd 01       	movw	r30, r26
 3a0:	0d c0       	rjmp	.+26     	; 0x3bc <__udivmodsi4_ep>

000003a2 <__udivmodsi4_loop>:
 3a2:	aa 1f       	adc	r26, r26
 3a4:	bb 1f       	adc	r27, r27
 3a6:	ee 1f       	adc	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	a2 17       	cp	r26, r18
 3ac:	b3 07       	cpc	r27, r19
 3ae:	e4 07       	cpc	r30, r20
 3b0:	f5 07       	cpc	r31, r21
 3b2:	20 f0       	brcs	.+8      	; 0x3bc <__udivmodsi4_ep>
 3b4:	a2 1b       	sub	r26, r18
 3b6:	b3 0b       	sbc	r27, r19
 3b8:	e4 0b       	sbc	r30, r20
 3ba:	f5 0b       	sbc	r31, r21

000003bc <__udivmodsi4_ep>:
 3bc:	66 1f       	adc	r22, r22
 3be:	77 1f       	adc	r23, r23
 3c0:	88 1f       	adc	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	1a 94       	dec	r1
 3c6:	69 f7       	brne	.-38     	; 0x3a2 <__udivmodsi4_loop>
 3c8:	60 95       	com	r22
 3ca:	70 95       	com	r23
 3cc:	80 95       	com	r24
 3ce:	90 95       	com	r25
 3d0:	9b 01       	movw	r18, r22
 3d2:	ac 01       	movw	r20, r24
 3d4:	bd 01       	movw	r22, r26
 3d6:	cf 01       	movw	r24, r30
 3d8:	08 95       	ret

000003da <_exit>:
 3da:	f8 94       	cli

000003dc <__stop_program>:
 3dc:	ff cf       	rjmp	.-2      	; 0x3dc <__stop_program>
